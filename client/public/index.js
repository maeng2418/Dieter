!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=161)}([function(t,e,r){"use strict";var n=r(12),o=r(11),c=r(51),i=r(17),a=r(34),u=r(24),s=r(54),f=r(99),l=r(55),p=r(8),d=r(68),y=p("isConcatSpreadable"),h=d>=51||!o((function(){var t=[];return t[y]=!1,t.concat()[0]!==t})),v=l("concat"),g=function(t){if(!i(t))return!1;var e=t[y];return void 0!==e?!!e:c(t)};n({target:"Array",proto:!0,forced:!h||!v},{concat:function(t){var e,r,n,o,c,i=a(this),l=f(i,0),p=0;for(e=-1,n=arguments.length;e<n;e++)if(g(c=-1===e?i:arguments[e])){if(p+(o=u(c.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(r=0;r<o;r++,p++)r in c&&s(l,p,c[r])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");s(l,p++,c)}return l.length=p,l}})},function(t,e,r){"use strict";var n=r(12),o=r(9),c=r(36),i=r(37),a=r(13),u=r(61),s=r(77),f=r(11),l=r(15),p=r(51),d=r(17),y=r(14),h=r(34),v=r(19),g=r(43),b=r(38),m=r(72),O=r(52),w=r(65),j=r(134),x=r(84),P=r(35),S=r(18),E=r(64),k=r(21),D=r(23),A=r(57),T=r(44),L=r(45),R=r(60),I=r(8),C=r(97),M=r(98),_=r(48),N=r(39),U=r(53).forEach,F=T("hidden"),q=I("toPrimitive"),B=N.set,H=N.getterFor("Symbol"),z=Object.prototype,G=o.Symbol,$=c("JSON","stringify"),Y=P.f,V=S.f,K=j.f,X=E.f,J=A("symbols"),W=A("op-symbols"),Q=A("string-to-symbol-registry"),Z=A("symbol-to-string-registry"),tt=A("wks"),et=o.QObject,rt=!et||!et.prototype||!et.prototype.findChild,nt=a&&f((function(){return 7!=m(V({},"a",{get:function(){return V(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=Y(z,e);n&&delete z[e],V(t,e,r),n&&t!==z&&V(z,e,n)}:V,ot=function(t,e){var r=J[t]=m(G.prototype);return B(r,{type:"Symbol",tag:t,description:e}),a||(r.description=e),r},ct=s?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof G},it=function(t,e,r){t===z&&it(W,e,r),y(t);var n=g(e,!0);return y(r),l(J,n)?(r.enumerable?(l(t,F)&&t[F][n]&&(t[F][n]=!1),r=m(r,{enumerable:b(0,!1)})):(l(t,F)||V(t,F,b(1,{})),t[F][n]=!0),nt(t,n,r)):V(t,n,r)},at=function(t,e){y(t);var r=v(e),n=O(r).concat(lt(r));return U(n,(function(e){a&&!ut.call(r,e)||it(t,e,r[e])})),t},ut=function(t){var e=g(t,!0),r=X.call(this,e);return!(this===z&&l(J,e)&&!l(W,e))&&(!(r||!l(this,e)||!l(J,e)||l(this,F)&&this[F][e])||r)},st=function(t,e){var r=v(t),n=g(e,!0);if(r!==z||!l(J,n)||l(W,n)){var o=Y(r,n);return!o||!l(J,n)||l(r,F)&&r[F][n]||(o.enumerable=!0),o}},ft=function(t){var e=K(v(t)),r=[];return U(e,(function(t){l(J,t)||l(L,t)||r.push(t)})),r},lt=function(t){var e=t===z,r=K(e?W:v(t)),n=[];return U(r,(function(t){!l(J,t)||e&&!l(z,t)||n.push(J[t])})),n};(u||(D((G=function(){if(this instanceof G)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=R(t),r=function(t){this===z&&r.call(W,t),l(this,F)&&l(this[F],e)&&(this[F][e]=!1),nt(this,e,b(1,t))};return a&&rt&&nt(z,e,{configurable:!0,set:r}),ot(e,t)}).prototype,"toString",(function(){return H(this).tag})),D(G,"withoutSetter",(function(t){return ot(R(t),t)})),E.f=ut,S.f=it,P.f=st,w.f=j.f=ft,x.f=lt,C.f=function(t){return ot(I(t),t)},a&&(V(G.prototype,"description",{configurable:!0,get:function(){return H(this).description}}),i||D(z,"propertyIsEnumerable",ut,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:G}),U(O(tt),(function(t){M(t)})),n({target:"Symbol",stat:!0,forced:!u},{for:function(t){var e=String(t);if(l(Q,e))return Q[e];var r=G(e);return Q[e]=r,Z[r]=e,r},keyFor:function(t){if(!ct(t))throw TypeError(t+" is not a symbol");if(l(Z,t))return Z[t]},useSetter:function(){rt=!0},useSimple:function(){rt=!1}}),n({target:"Object",stat:!0,forced:!u,sham:!a},{create:function(t,e){return void 0===e?m(t):at(m(t),e)},defineProperty:it,defineProperties:at,getOwnPropertyDescriptor:st}),n({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:ft,getOwnPropertySymbols:lt}),n({target:"Object",stat:!0,forced:f((function(){x.f(1)}))},{getOwnPropertySymbols:function(t){return x.f(h(t))}}),$)&&n({target:"JSON",stat:!0,forced:!u||f((function(){var t=G();return"[null]"!=$([t])||"{}"!=$({a:t})||"{}"!=$(Object(t))}))},{stringify:function(t,e,r){for(var n,o=[t],c=1;arguments.length>c;)o.push(arguments[c++]);if(n=e,(d(e)||void 0!==t)&&!ct(t))return p(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!ct(e))return e}),o[1]=e,$.apply(null,o)}});G.prototype[q]||k(G.prototype,q,G.prototype.valueOf),_(G,"Symbol"),L[F]=!0},function(t,e,r){"use strict";var n=r(12),o=r(53).filter,c=r(55),i=r(42),a=c("filter"),u=i("filter");n({target:"Array",proto:!0,forced:!a||!u},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var n=r(12),o=r(100);n({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(t,e,r){var n=r(12),o=r(11),c=r(19),i=r(35).f,a=r(13),u=o((function(){i(1)}));n({target:"Object",stat:!0,forced:!a||u,sham:!a},{getOwnPropertyDescriptor:function(t,e){return i(c(t),e)}})},function(t,e,r){var n=r(12),o=r(13),c=r(80),i=r(19),a=r(35),u=r(54);n({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(t){for(var e,r,n=i(t),o=a.f,s=c(n),f={},l=0;s.length>l;)void 0!==(r=o(n,e=s[l++]))&&u(f,e,r);return f}})},function(t,e,r){var n=r(12),o=r(34),c=r(52);n({target:"Object",stat:!0,forced:r(11)((function(){c(1)}))},{keys:function(t){return c(o(t))}})},function(t,e,r){var n=r(9),o=r(101),c=r(100),i=r(21);for(var a in o){var u=n[a],s=u&&u.prototype;if(s&&s.forEach!==c)try{i(s,"forEach",c)}catch(t){s.forEach=c}}},function(t,e,r){var n=r(9),o=r(57),c=r(15),i=r(60),a=r(61),u=r(77),s=o("wks"),f=n.Symbol,l=u?f:f&&f.withoutSetter||i;t.exports=function(t){return c(s,t)||(a&&c(f,t)?s[t]=f[t]:s[t]=l("Symbol."+t)),s[t]}},function(t,e,r){(function(e){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof e&&e)||Function("return this")()}).call(this,r(115))},function(t,e,r){"use strict";var n=r(12),o=r(135).left,c=r(73),i=r(42),a=c("reduce"),u=i("reduce",{1:0});n({target:"Array",proto:!0,forced:!a||!u},{reduce:function(t){return o(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,r){var n=r(9),o=r(35).f,c=r(21),i=r(23),a=r(58),u=r(79),s=r(85);t.exports=function(t,e){var r,f,l,p,d,y=t.target,h=t.global,v=t.stat;if(r=h?n:v?n[y]||a(y,{}):(n[y]||{}).prototype)for(f in e){if(p=e[f],l=t.noTargetGet?(d=o(r,f))&&d.value:r[f],!s(h?f:y+(v?".":"#")+f,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;u(p,l)}(t.sham||l&&l.sham)&&c(p,"sham",!0),i(r,f,p,t)}}},function(t,e,r){var n=r(11);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,r){var n=r(17);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){"use strict";var n=r(106),o=Object.prototype.toString;function c(t){return"[object Array]"===o.call(t)}function i(t){return void 0===t}function a(t){return null!==t&&"object"==typeof t}function u(t){if("[object Object]"!==o.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function s(t){return"[object Function]"===o.call(t)}function f(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),c(t))for(var r=0,n=t.length;r<n;r++)e.call(null,t[r],r,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}t.exports={isArray:c,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:function(t){return null!==t&&!i(t)&&null!==t.constructor&&!i(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:a,isPlainObject:u,isUndefined:i,isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:s,isStream:function(t){return a(t)&&s(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:f,merge:function t(){var e={};function r(r,n){u(e[n])&&u(r)?e[n]=t(e[n],r):u(r)?e[n]=t({},r):c(r)?e[n]=r.slice():e[n]=r}for(var n=0,o=arguments.length;n<o;n++)f(arguments[n],r);return e},extend:function(t,e,r){return f(e,(function(e,o){t[o]=r&&"function"==typeof e?n(e,r):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var n=r(13),o=r(76),c=r(14),i=r(43),a=Object.defineProperty;e.f=n?a:function(t,e,r){if(c(t),e=i(e,!0),c(r),o)try{return a(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(46),o=r(47);t.exports=function(t){return n(o(t))}},function(t,e,r){var n=r(56),o=r(23),c=r(117);n||o(Object.prototype,"toString",c,{unsafe:!0})},function(t,e,r){var n=r(13),o=r(18),c=r(38);t.exports=n?function(t,e,r){return o.f(t,e,c(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){"use strict";var n=r(19),o=r(137),c=r(41),i=r(39),a=r(103),u=i.set,s=i.getterFor("Array Iterator");t.exports=a(Array,"Array",(function(t,e){u(this,{type:"Array Iterator",target:n(t),index:0,kind:e})}),(function(){var t=s(this),e=t.target,r=t.kind,n=t.index++;return!e||n>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:e[n],done:!1}:{value:[n,e[n]],done:!1}}),"values"),c.Arguments=c.Array,o("keys"),o("values"),o("entries")},function(t,e,r){var n=r(9),o=r(21),c=r(15),i=r(58),a=r(62),u=r(39),s=u.get,f=u.enforce,l=String(String).split("String");(t.exports=function(t,e,r,a){var u=!!a&&!!a.unsafe,s=!!a&&!!a.enumerable,p=!!a&&!!a.noTargetGet;"function"==typeof r&&("string"!=typeof e||c(r,"name")||o(r,"name",e),f(r).source=l.join("string"==typeof e?e:"")),t!==n?(u?!p&&t[e]&&(s=!0):delete t[e],s?t[e]=r:o(t,e,r)):s?t[e]=r:i(e,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||a(this)}))},function(t,e,r){var n=r(66),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},function(t,e,r){"use strict";var n=r(12),o=r(13),c=r(9),i=r(15),a=r(17),u=r(18).f,s=r(79),f=c.Symbol;if(o&&"function"==typeof f&&(!("description"in f.prototype)||void 0!==f().description)){var l={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof p?new f(t):void 0===t?f():f(t);return""===t&&(l[e]=!0),e};s(p,f);var d=p.prototype=f.prototype;d.constructor=p;var y=d.toString,h="Symbol(test)"==String(f("test")),v=/^Symbol\((.*)\)[^)]+$/;u(d,"description",{configurable:!0,get:function(){var t=a(this)?this.valueOf():this,e=y.call(t);if(i(l,t))return"";var r=h?e.slice(7,-1):e.replace(v,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:p})}},function(t,e,r){r(98)("iterator")},function(t,e,r){var n=r(12),o=r(136);n({target:"Array",stat:!0,forced:!r(89)((function(t){Array.from(t)}))},{from:o})},function(t,e,r){"use strict";var n=r(12),o=r(17),c=r(51),i=r(83),a=r(24),u=r(19),s=r(54),f=r(8),l=r(55),p=r(42),d=l("slice"),y=p("slice",{ACCESSORS:!0,0:0,1:2}),h=f("species"),v=[].slice,g=Math.max;n({target:"Array",proto:!0,forced:!d||!y},{slice:function(t,e){var r,n,f,l=u(this),p=a(l.length),d=i(t,p),y=i(void 0===e?p:e,p);if(c(l)&&("function"!=typeof(r=l.constructor)||r!==Array&&!c(r.prototype)?o(r)&&null===(r=r[h])&&(r=void 0):r=void 0,r===Array||void 0===r))return v.call(l,d,y);for(n=new(void 0===r?Array:r)(g(y-d,0)),f=0;d<y;d++,f++)d in l&&s(n,f,l[d]);return n.length=f,n}})},function(t,e,r){var n=r(13),o=r(18).f,c=Function.prototype,i=c.toString,a=/^\s*function ([^ (]*)/;n&&!("name"in c)&&o(c,"name",{configurable:!0,get:function(){try{return i.call(this).match(a)[1]}catch(t){return""}}})},function(t,e,r){"use strict";var n=r(23),o=r(14),c=r(11),i=r(95),a=RegExp.prototype,u=a.toString,s=c((function(){return"/a/b"!=u.call({source:"a",flags:"b"})})),f="toString"!=u.name;(s||f)&&n(RegExp.prototype,"toString",(function(){var t=o(this),e=String(t.source),r=t.flags;return"/"+e+"/"+String(void 0===r&&t instanceof RegExp&&!("flags"in a)?i.call(t):r)}),{unsafe:!0})},function(t,e,r){"use strict";var n=r(96).charAt,o=r(39),c=r(103),i=o.set,a=o.getterFor("String Iterator");c(String,"String",(function(t){i(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=a(this),r=e.string,o=e.index;return o>=r.length?{value:void 0,done:!0}:(t=n(r,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e,r){var n=r(9),o=r(101),c=r(22),i=r(21),a=r(8),u=a("iterator"),s=a("toStringTag"),f=c.values;for(var l in o){var p=n[l],d=p&&p.prototype;if(d){if(d[u]!==f)try{i(d,u,f)}catch(t){d[u]=f}if(d[s]||i(d,s,l),o[l])for(var y in c)if(d[y]!==c[y])try{i(d,y,c[y])}catch(t){d[y]=c[y]}}}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e,r){var n=r(47);t.exports=function(t){return Object(n(t))}},function(t,e,r){var n=r(13),o=r(64),c=r(38),i=r(19),a=r(43),u=r(15),s=r(76),f=Object.getOwnPropertyDescriptor;e.f=n?f:function(t,e){if(t=i(t),e=a(e,!0),s)try{return f(t,e)}catch(t){}if(u(t,e))return c(!o.f.call(t,e),t[e])}},function(t,e,r){var n=r(81),o=r(9),c=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?c(n[t])||c(o[t]):n[t]&&n[t][e]||o[t]&&o[t][e]}},function(t,e){t.exports=!1},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,r){var n,o,c,i=r(116),a=r(9),u=r(17),s=r(21),f=r(15),l=r(44),p=r(45),d=a.WeakMap;if(i){var y=new d,h=y.get,v=y.has,g=y.set;n=function(t,e){return g.call(y,t,e),e},o=function(t){return h.call(y,t)||{}},c=function(t){return v.call(y,t)}}else{var b=l("state");p[b]=!0,n=function(t,e){return s(t,b,e),e},o=function(t){return f(t,b)?t[b]:{}},c=function(t){return f(t,b)}}t.exports={set:n,get:o,has:c,enforce:function(t){return c(t)?o(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!u(e)||(r=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e){t.exports={}},function(t,e,r){var n=r(13),o=r(11),c=r(15),i=Object.defineProperty,a={},u=function(t){throw t};t.exports=function(t,e){if(c(a,t))return a[t];e||(e={});var r=[][t],s=!!c(e,"ACCESSORS")&&e.ACCESSORS,f=c(e,0)?e[0]:u,l=c(e,1)?e[1]:void 0;return a[t]=!!r&&!o((function(){if(s&&!n)return!0;var t={length:-1};s?i(t,1,{enumerable:!0,get:u}):t[1]=1,r.call(t,f,l)}))}},function(t,e,r){var n=r(17);t.exports=function(t,e){if(!n(t))return t;var r,o;if(e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!n(o=r.call(t)))return o;if(!e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,r){var n=r(57),o=r(60),c=n("keys");t.exports=function(t){return c[t]||(c[t]=o(t))}},function(t,e){t.exports={}},function(t,e,r){var n=r(11),o=r(33),c="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?c.call(t,""):Object(t)}:Object},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,r){var n=r(18).f,o=r(15),c=r(8)("toStringTag");t.exports=function(t,e,r){t&&!o(t=r?t:t.prototype,c)&&n(t,c,{configurable:!0,value:e})}},function(t,e,r){var n=r(40);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,o){return t.call(e,r,n,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,r){"use strict";var n=r(12),o=r(70);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(t,e,r){var n=r(33);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(82),o=r(67);t.exports=Object.keys||function(t){return n(t,o)}},function(t,e,r){var n=r(49),o=r(46),c=r(34),i=r(24),a=r(99),u=[].push,s=function(t){var e=1==t,r=2==t,s=3==t,f=4==t,l=6==t,p=5==t||l;return function(d,y,h,v){for(var g,b,m=c(d),O=o(m),w=n(y,h,3),j=i(O.length),x=0,P=v||a,S=e?P(d,j):r?P(d,0):void 0;j>x;x++)if((p||x in O)&&(b=w(g=O[x],x,m),t))if(e)S[x]=b;else if(b)switch(t){case 3:return!0;case 5:return g;case 6:return x;case 2:u.call(S,g)}else if(f)return!1;return l?-1:s||f?f:S}};t.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6)}},function(t,e,r){"use strict";var n=r(43),o=r(18),c=r(38);t.exports=function(t,e,r){var i=n(e);i in t?o.f(t,i,c(0,r)):t[i]=r}},function(t,e,r){var n=r(11),o=r(8),c=r(68),i=o("species");t.exports=function(t){return c>=51||!n((function(){var e=[];return(e.constructor={})[i]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,r){var n={};n[r(8)("toStringTag")]="z",t.exports="[object z]"===String(n)},function(t,e,r){var n=r(37),o=r(75);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.5",mode:n?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e,r){var n=r(9),o=r(21);t.exports=function(t,e){try{o(n,t,e)}catch(r){n[t]=e}return e}},function(t,e,r){var n=r(9),o=r(17),c=n.document,i=o(c)&&o(c.createElement);t.exports=function(t){return i?c.createElement(t):{}}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+n).toString(36)}},function(t,e,r){var n=r(11);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(t,e,r){var n=r(75),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(t){return o.call(t)}),t.exports=n.inspectSource},function(t,e,r){"use strict";var n,o,c,i,a=r(12),u=r(37),s=r(9),f=r(36),l=r(119),p=r(23),d=r(120),y=r(48),h=r(121),v=r(17),g=r(40),b=r(122),m=r(33),O=r(62),w=r(123),j=r(89),x=r(124),P=r(90).set,S=r(125),E=r(126),k=r(127),D=r(94),A=r(128),T=r(39),L=r(85),R=r(8),I=r(68),C=R("species"),M="Promise",_=T.get,N=T.set,U=T.getterFor(M),F=l,q=s.TypeError,B=s.document,H=s.process,z=f("fetch"),G=D.f,$=G,Y="process"==m(H),V=!!(B&&B.createEvent&&s.dispatchEvent),K=L(M,(function(){if(!(O(F)!==String(F))){if(66===I)return!0;if(!Y&&"function"!=typeof PromiseRejectionEvent)return!0}if(u&&!F.prototype.finally)return!0;if(I>=51&&/native code/.test(F))return!1;var t=F.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[C]=e,!(t.then((function(){}))instanceof e)})),X=K||!j((function(t){F.all(t).catch((function(){}))})),J=function(t){var e;return!(!v(t)||"function"!=typeof(e=t.then))&&e},W=function(t,e,r){if(!e.notified){e.notified=!0;var n=e.reactions;S((function(){for(var o=e.value,c=1==e.state,i=0;n.length>i;){var a,u,s,f=n[i++],l=c?f.ok:f.fail,p=f.resolve,d=f.reject,y=f.domain;try{l?(c||(2===e.rejection&&et(t,e),e.rejection=1),!0===l?a=o:(y&&y.enter(),a=l(o),y&&(y.exit(),s=!0)),a===f.promise?d(q("Promise-chain cycle")):(u=J(a))?u.call(a,p,d):p(a)):d(o)}catch(t){y&&!s&&y.exit(),d(t)}}e.reactions=[],e.notified=!1,r&&!e.rejection&&Z(t,e)}))}},Q=function(t,e,r){var n,o;V?((n=B.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),s.dispatchEvent(n)):n={promise:e,reason:r},(o=s["on"+t])?o(n):"unhandledrejection"===t&&k("Unhandled promise rejection",r)},Z=function(t,e){P.call(s,(function(){var r,n=e.value;if(tt(e)&&(r=A((function(){Y?H.emit("unhandledRejection",n,t):Q("unhandledrejection",t,n)})),e.rejection=Y||tt(e)?2:1,r.error))throw r.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t,e){P.call(s,(function(){Y?H.emit("rejectionHandled",t):Q("rejectionhandled",t,e.value)}))},rt=function(t,e,r,n){return function(o){t(e,r,o,n)}},nt=function(t,e,r,n){e.done||(e.done=!0,n&&(e=n),e.value=r,e.state=2,W(t,e,!0))},ot=function(t,e,r,n){if(!e.done){e.done=!0,n&&(e=n);try{if(t===r)throw q("Promise can't be resolved itself");var o=J(r);o?S((function(){var n={done:!1};try{o.call(r,rt(ot,t,n,e),rt(nt,t,n,e))}catch(r){nt(t,n,r,e)}})):(e.value=r,e.state=1,W(t,e,!1))}catch(r){nt(t,{done:!1},r,e)}}};K&&(F=function(t){b(this,F,M),g(t),n.call(this);var e=_(this);try{t(rt(ot,this,e),rt(nt,this,e))}catch(t){nt(this,e,t)}},(n=function(t){N(this,{type:M,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=d(F.prototype,{then:function(t,e){var r=U(this),n=G(x(this,F));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=Y?H.domain:void 0,r.parent=!0,r.reactions.push(n),0!=r.state&&W(this,r,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n,e=_(t);this.promise=t,this.resolve=rt(ot,t,e),this.reject=rt(nt,t,e)},D.f=G=function(t){return t===F||t===c?new o(t):$(t)},u||"function"!=typeof l||(i=l.prototype.then,p(l.prototype,"then",(function(t,e){var r=this;return new F((function(t,e){i.call(r,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof z&&a({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return E(F,z.apply(s,arguments))}}))),a({global:!0,wrap:!0,forced:K},{Promise:F}),y(F,M,!1,!0),h(M),c=f(M),a({target:M,stat:!0,forced:K},{reject:function(t){var e=G(this);return e.reject.call(void 0,t),e.promise}}),a({target:M,stat:!0,forced:u||K},{resolve:function(t){return E(u&&this===c?F:this,t)}}),a({target:M,stat:!0,forced:X},{all:function(t){var e=this,r=G(e),n=r.resolve,o=r.reject,c=A((function(){var r=g(e.resolve),c=[],i=0,a=1;w(t,(function(t){var u=i++,s=!1;c.push(void 0),a++,r.call(e,t).then((function(t){s||(s=!0,c[u]=t,--a||n(c))}),o)})),--a||n(c)}));return c.error&&o(c.value),r.promise},race:function(t){var e=this,r=G(e),n=r.reject,o=A((function(){var o=g(e.resolve);w(t,(function(t){o.call(e,t).then(r.resolve,n)}))}));return o.error&&n(o.value),r.promise}})},function(t,e,r){"use strict";var n={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,c=o&&!n.call({1:2},1);e.f=c?function(t){var e=o(this,t);return!!e&&e.enumerable}:n},function(t,e,r){var n=r(82),o=r(67).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,r){var n,o,c=r(9),i=r(93),a=c.process,u=a&&a.versions,s=u&&u.v8;s?o=(n=s.split("."))[0]+n[1]:i&&(!(n=i.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=i.match(/Chrome\/(\d+)/))&&(o=n[1]),t.exports=o&&+o},function(t,e,r){var n=function(t){"use strict";var e=Object.prototype,r=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},o=n.iterator||"@@iterator",c=n.asyncIterator||"@@asyncIterator",i=n.toStringTag||"@@toStringTag";function a(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{a({},"")}catch(t){a=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var o=e&&e.prototype instanceof l?e:l,c=Object.create(o.prototype),i=new x(n||[]);return c._invoke=function(t,e,r){var n="suspendedStart";return function(o,c){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw c;return S()}for(r.method=o,r.arg=c;;){var i=r.delegate;if(i){var a=O(i,r);if(a){if(a===f)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var u=s(t,e,r);if("normal"===u.type){if(n=r.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n="completed",r.method="throw",r.arg=u.arg)}}}(t,r,i),c}function s(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f={};function l(){}function p(){}function d(){}var y={};y[o]=function(){return this};var h=Object.getPrototypeOf,v=h&&h(h(P([])));v&&v!==e&&r.call(v,o)&&(y=v);var g=d.prototype=l.prototype=Object.create(y);function b(t){["next","throw","return"].forEach((function(e){a(t,e,(function(t){return this._invoke(e,t)}))}))}function m(t,e){var n;this._invoke=function(o,c){function i(){return new e((function(n,i){!function n(o,c,i,a){var u=s(t[o],t,c);if("throw"!==u.type){var f=u.arg,l=f.value;return l&&"object"==typeof l&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,i,a)}),(function(t){n("throw",t,i,a)})):e.resolve(l).then((function(t){f.value=t,i(f)}),(function(t){return n("throw",t,i,a)}))}a(u.arg)}(o,c,n,i)}))}return n=n?n.then(i,i):i()}}function O(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,O(t,e),"throw"===e.method))return f;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var n=s(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,f;var o=n.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function w(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(w,this),this.reset(!0)}function P(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,c=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return c.next=c}}return{next:S}}function S(){return{value:void 0,done:!0}}return p.prototype=g.constructor=d,d.constructor=p,p.displayName=a(d,i,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,a(t,i,"GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},b(m.prototype),m.prototype[c]=function(){return this},t.AsyncIterator=m,t.async=function(e,r,n,o,c){void 0===c&&(c=Promise);var i=new m(u(e,r,n,o),c);return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},b(g),a(g,i,"Generator"),g[o]=function(){return this},g.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=P,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return i.type="throw",i.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var c=this.tryEntries[o],i=c.completion;if("root"===c.tryLoc)return n("end");if(c.tryLoc<=this.prev){var a=r.call(c,"catchLoc"),u=r.call(c,"finallyLoc");if(a&&u){if(this.prev<c.catchLoc)return n(c.catchLoc,!0);if(this.prev<c.finallyLoc)return n(c.finallyLoc)}else if(a){if(this.prev<c.catchLoc)return n(c.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return n(c.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var c=o;break}}c&&("break"===t||"continue"===t)&&c.tryLoc<=e&&e<=c.finallyLoc&&(c=null);var i=c?c.completion:{};return i.type=t,i.arg=e,c?(this.method="next",this.next=c.finallyLoc,f):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),j(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:P(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}},function(t,e,r){"use strict";var n,o,c=r(95),i=r(129),a=RegExp.prototype.exec,u=String.prototype.replace,s=a,f=(n=/a/,o=/b*/g,a.call(n,"a"),a.call(o,"a"),0!==n.lastIndex||0!==o.lastIndex),l=i.UNSUPPORTED_Y||i.BROKEN_CARET,p=void 0!==/()??/.exec("")[1];(f||p||l)&&(s=function(t){var e,r,n,o,i=this,s=l&&i.sticky,d=c.call(i),y=i.source,h=0,v=t;return s&&(-1===(d=d.replace("y","")).indexOf("g")&&(d+="g"),v=String(t).slice(i.lastIndex),i.lastIndex>0&&(!i.multiline||i.multiline&&"\n"!==t[i.lastIndex-1])&&(y="(?: "+y+")",v=" "+v,h++),r=new RegExp("^(?:"+y+")",d)),p&&(r=new RegExp("^"+y+"$(?!\\s)",d)),f&&(e=i.lastIndex),n=a.call(s?r:i,v),s?n?(n.input=n.input.slice(h),n[0]=n[0].slice(h),n.index=i.lastIndex,i.lastIndex+=n[0].length):i.lastIndex=0:f&&n&&(i.lastIndex=i.global?n.index+n[0].length:e),p&&n&&n.length>1&&u.call(n[0],r,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0)})),n}),t.exports=s},function(t,e,r){"use strict";var n=r(130),o=r(14),c=r(24),i=r(47),a=r(131),u=r(132);n("match",1,(function(t,e,r){return[function(e){var r=i(this),n=null==e?void 0:e[t];return void 0!==n?n.call(e,r):new RegExp(e)[t](String(r))},function(t){var n=r(e,t,this);if(n.done)return n.value;var i=o(t),s=String(this);if(!i.global)return u(i,s);var f=i.unicode;i.lastIndex=0;for(var l,p=[],d=0;null!==(l=u(i,s));){var y=String(l[0]);p[d]=y,""===y&&(i.lastIndex=a(s,c(i.lastIndex),f)),d++}return 0===d?null:p}]}))},function(t,e,r){var n,o=r(14),c=r(133),i=r(67),a=r(45),u=r(91),s=r(59),f=r(44),l=f("IE_PROTO"),p=function(){},d=function(t){return"<script>"+t+"<\/script>"},y=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;y=n?function(t){t.write(d("")),t.close();var e=t.parentWindow.Object;return t=null,e}(n):((e=s("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(d("document.F=Object")),t.close(),t.F);for(var r=i.length;r--;)delete y.prototype[i[r]];return y()};a[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(p.prototype=o(t),r=new p,p.prototype=null,r[l]=t):r=y(),void 0===e?r:c(r,e)}},function(t,e,r){"use strict";var n=r(11);t.exports=function(t,e){var r=[][t];return!!r&&n((function(){r.call(null,e||function(){throw 1},1)}))}},function(t,e,r){"use strict";var n=r(12),o=r(53).map,c=r(55),i=r(42),a=c("map"),u=i("map");n({target:"Array",proto:!0,forced:!a||!u},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(9),o=r(58),c=n["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=c},function(t,e,r){var n=r(13),o=r(11),c=r(59);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(c("div"),"a",{get:function(){return 7}}).a}))},function(t,e,r){var n=r(61);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,r){var n=r(56),o=r(33),c=r(8)("toStringTag"),i="Arguments"==o(function(){return arguments}());t.exports=n?o:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),c))?r:i?o(e):"Object"==(n=o(e))&&"function"==typeof e.callee?"Arguments":n}},function(t,e,r){var n=r(15),o=r(80),c=r(35),i=r(18);t.exports=function(t,e){for(var r=o(e),a=i.f,u=c.f,s=0;s<r.length;s++){var f=r[s];n(t,f)||a(t,f,u(e,f))}}},function(t,e,r){var n=r(36),o=r(65),c=r(84),i=r(14);t.exports=n("Reflect","ownKeys")||function(t){var e=o.f(i(t)),r=c.f;return r?e.concat(r(t)):e}},function(t,e,r){var n=r(9);t.exports=n},function(t,e,r){var n=r(15),o=r(19),c=r(118).indexOf,i=r(45);t.exports=function(t,e){var r,a=o(t),u=0,s=[];for(r in a)!n(i,r)&&n(a,r)&&s.push(r);for(;e.length>u;)n(a,r=e[u++])&&(~c(s,r)||s.push(r));return s}},function(t,e,r){var n=r(66),o=Math.max,c=Math.min;t.exports=function(t,e){var r=n(t);return r<0?o(r+e,0):c(r,e)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(11),o=/#|\.prototype\./,c=function(t,e){var r=a[i(t)];return r==s||r!=u&&("function"==typeof e?n(e):!!e)},i=c.normalize=function(t){return String(t).replace(o,".").toLowerCase()},a=c.data={},u=c.NATIVE="N",s=c.POLYFILL="P";t.exports=c},function(t,e,r){var n=r(8),o=r(41),c=n("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||i[c]===t)}},function(t,e,r){var n=r(78),o=r(41),c=r(8)("iterator");t.exports=function(t){if(null!=t)return t[c]||t["@@iterator"]||o[n(t)]}},function(t,e,r){var n=r(14);t.exports=function(t,e,r,o){try{return o?e(n(r)[0],r[1]):e(r)}catch(e){var c=t.return;throw void 0!==c&&n(c.call(t)),e}}},function(t,e,r){var n=r(8)("iterator"),o=!1;try{var c=0,i={next:function(){return{done:!!c++}},return:function(){o=!0}};i[n]=function(){return this},Array.from(i,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var r=!1;try{var c={};c[n]=function(){return{next:function(){return{done:r=!0}}}},t(c)}catch(t){}return r}},function(t,e,r){var n,o,c,i=r(9),a=r(11),u=r(33),s=r(49),f=r(91),l=r(59),p=r(92),d=i.location,y=i.setImmediate,h=i.clearImmediate,v=i.process,g=i.MessageChannel,b=i.Dispatch,m=0,O={},w=function(t){if(O.hasOwnProperty(t)){var e=O[t];delete O[t],e()}},j=function(t){return function(){w(t)}},x=function(t){w(t.data)},P=function(t){i.postMessage(t+"",d.protocol+"//"+d.host)};y&&h||(y=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return O[++m]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},n(m),m},h=function(t){delete O[t]},"process"==u(v)?n=function(t){v.nextTick(j(t))}:b&&b.now?n=function(t){b.now(j(t))}:g&&!p?(c=(o=new g).port2,o.port1.onmessage=x,n=s(c.postMessage,c,1)):!i.addEventListener||"function"!=typeof postMessage||i.importScripts||a(P)||"file:"===d.protocol?n="onreadystatechange"in l("script")?function(t){f.appendChild(l("script")).onreadystatechange=function(){f.removeChild(this),w(t)}}:function(t){setTimeout(j(t),0)}:(n=P,i.addEventListener("message",x,!1))),t.exports={set:y,clear:h}},function(t,e,r){var n=r(36);t.exports=n("document","documentElement")},function(t,e,r){var n=r(93);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(n)},function(t,e,r){var n=r(36);t.exports=n("navigator","userAgent")||""},function(t,e,r){"use strict";var n=r(40),o=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new o(t)}},function(t,e,r){"use strict";var n=r(14);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){var n=r(66),o=r(47),c=function(t){return function(e,r){var c,i,a=String(o(e)),u=n(r),s=a.length;return u<0||u>=s?t?"":void 0:(c=a.charCodeAt(u))<55296||c>56319||u+1===s||(i=a.charCodeAt(u+1))<56320||i>57343?t?a.charAt(u):c:t?a.slice(u,u+2):i-56320+(c-55296<<10)+65536}};t.exports={codeAt:c(!1),charAt:c(!0)}},function(t,e,r){var n=r(8);e.f=n},function(t,e,r){var n=r(81),o=r(15),c=r(97),i=r(18).f;t.exports=function(t){var e=n.Symbol||(n.Symbol={});o(e,t)||i(e,t,{value:c.f(t)})}},function(t,e,r){var n=r(17),o=r(51),c=r(8)("species");t.exports=function(t,e){var r;return o(t)&&("function"!=typeof(r=t.constructor)||r!==Array&&!o(r.prototype)?n(r)&&null===(r=r[c])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===e?0:e)}},function(t,e,r){"use strict";var n=r(53).forEach,o=r(73),c=r(42),i=o("forEach"),a=c("forEach");t.exports=i&&a?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,r){"use strict";var n=r(12),o=r(46),c=r(19),i=r(73),a=[].join,u=o!=Object,s=i("join",",");n({target:"Array",proto:!0,forced:u||!s},{join:function(t){return a.call(c(this),void 0===t?",":t)}})},function(t,e,r){"use strict";var n=r(12),o=r(138),c=r(105),i=r(140),a=r(48),u=r(21),s=r(23),f=r(8),l=r(37),p=r(41),d=r(104),y=d.IteratorPrototype,h=d.BUGGY_SAFARI_ITERATORS,v=f("iterator"),g=function(){return this};t.exports=function(t,e,r,f,d,b,m){o(r,e,f);var O,w,j,x=function(t){if(t===d&&D)return D;if(!h&&t in E)return E[t];switch(t){case"keys":case"values":case"entries":return function(){return new r(this,t)}}return function(){return new r(this)}},P=e+" Iterator",S=!1,E=t.prototype,k=E[v]||E["@@iterator"]||d&&E[d],D=!h&&k||x(d),A="Array"==e&&E.entries||k;if(A&&(O=c(A.call(new t)),y!==Object.prototype&&O.next&&(l||c(O)===y||(i?i(O,y):"function"!=typeof O[v]&&u(O,v,g)),a(O,P,!0,!0),l&&(p[P]=g))),"values"==d&&k&&"values"!==k.name&&(S=!0,D=function(){return k.call(this)}),l&&!m||E[v]===D||u(E,v,D),p[e]=D,d)if(w={values:x("values"),keys:b?D:x("keys"),entries:x("entries")},m)for(j in w)(h||S||!(j in E))&&s(E,j,w[j]);else n({target:e,proto:!0,forced:h||S},w);return w}},function(t,e,r){"use strict";var n,o,c,i=r(105),a=r(21),u=r(15),s=r(8),f=r(37),l=s("iterator"),p=!1;[].keys&&("next"in(c=[].keys())?(o=i(i(c)))!==Object.prototype&&(n=o):p=!0),null==n&&(n={}),f||u(n,l)||a(n,l,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},function(t,e,r){var n=r(15),o=r(34),c=r(44),i=r(139),a=c("IE_PROTO"),u=Object.prototype;t.exports=i?Object.getPrototypeOf:function(t){return t=o(t),n(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,r){"use strict";t.exports=function(t,e){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return t.apply(e,r)}}},function(t,e,r){"use strict";var n=r(16);function o(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,r){if(!e)return t;var c;if(r)c=r(e);else if(n.isURLSearchParams(e))c=e.toString();else{var i=[];n.forEach(e,(function(t,e){null!=t&&(n.isArray(t)?e+="[]":t=[t],n.forEach(t,(function(t){n.isDate(t)?t=t.toISOString():n.isObject(t)&&(t=JSON.stringify(t)),i.push(o(e)+"="+o(t))})))})),c=i.join("&")}if(c){var a=t.indexOf("#");-1!==a&&(t=t.slice(0,a)),t+=(-1===t.indexOf("?")?"?":"&")+c}return t}},function(t,e,r){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,r){"use strict";(function(e){var n=r(16),o=r(150),c={"Content-Type":"application/x-www-form-urlencoded"};function i(t,e){!n.isUndefined(t)&&n.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var a,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==e&&"[object process]"===Object.prototype.toString.call(e))&&(a=r(110)),a),transformRequest:[function(t,e){return o(e,"Accept"),o(e,"Content-Type"),n.isFormData(t)||n.isArrayBuffer(t)||n.isBuffer(t)||n.isStream(t)||n.isFile(t)||n.isBlob(t)?t:n.isArrayBufferView(t)?t.buffer:n.isURLSearchParams(t)?(i(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):n.isObject(t)?(i(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],(function(t){u.headers[t]={}})),n.forEach(["post","put","patch"],(function(t){u.headers[t]=n.merge(c)})),t.exports=u}).call(this,r(149))},function(t,e,r){"use strict";var n=r(16),o=r(151),c=r(153),i=r(107),a=r(154),u=r(157),s=r(158),f=r(111);t.exports=function(t){return new Promise((function(e,r){var l=t.data,p=t.headers;n.isFormData(l)&&delete p["Content-Type"];var d=new XMLHttpRequest;if(t.auth){var y=t.auth.username||"",h=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";p.Authorization="Basic "+btoa(y+":"+h)}var v=a(t.baseURL,t.url);if(d.open(t.method.toUpperCase(),i(v,t.params,t.paramsSerializer),!0),d.timeout=t.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?u(d.getAllResponseHeaders()):null,c={data:t.responseType&&"text"!==t.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:n,config:t,request:d};o(e,r,c),d=null}},d.onabort=function(){d&&(r(f("Request aborted",t,"ECONNABORTED",d)),d=null)},d.onerror=function(){r(f("Network Error",t,null,d)),d=null},d.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),r(f(e,t,"ECONNABORTED",d)),d=null},n.isStandardBrowserEnv()){var g=(t.withCredentials||s(v))&&t.xsrfCookieName?c.read(t.xsrfCookieName):void 0;g&&(p[t.xsrfHeaderName]=g)}if("setRequestHeader"in d&&n.forEach(p,(function(t,e){void 0===l&&"content-type"===e.toLowerCase()?delete p[e]:d.setRequestHeader(e,t)})),n.isUndefined(t.withCredentials)||(d.withCredentials=!!t.withCredentials),t.responseType)try{d.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&d.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){d&&(d.abort(),r(t),d=null)})),l||(l=null),d.send(l)}))}},function(t,e,r){"use strict";var n=r(152);t.exports=function(t,e,r,o,c){var i=new Error(t);return n(i,e,r,o,c)}},function(t,e,r){"use strict";var n=r(16);t.exports=function(t,e){e=e||{};var r={},o=["url","method","data"],c=["headers","auth","proxy","params"],i=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],a=["validateStatus"];function u(t,e){return n.isPlainObject(t)&&n.isPlainObject(e)?n.merge(t,e):n.isPlainObject(e)?n.merge({},e):n.isArray(e)?e.slice():e}function s(o){n.isUndefined(e[o])?n.isUndefined(t[o])||(r[o]=u(void 0,t[o])):r[o]=u(t[o],e[o])}n.forEach(o,(function(t){n.isUndefined(e[t])||(r[t]=u(void 0,e[t]))})),n.forEach(c,s),n.forEach(i,(function(o){n.isUndefined(e[o])?n.isUndefined(t[o])||(r[o]=u(void 0,t[o])):r[o]=u(void 0,e[o])})),n.forEach(a,(function(n){n in e?r[n]=u(t[n],e[n]):n in t&&(r[n]=u(void 0,t[n]))}));var f=o.concat(c).concat(i).concat(a),l=Object.keys(t).concat(Object.keys(e)).filter((function(t){return-1===f.indexOf(t)}));return n.forEach(l,s),r}},function(t,e,r){"use strict";function n(t){this.message=t}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,t.exports=n},function(t,e,r){t.exports=r(144)},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){var n=r(9),o=r(62),c=n.WeakMap;t.exports="function"==typeof c&&/native code/.test(o(c))},function(t,e,r){"use strict";var n=r(56),o=r(78);t.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,e,r){var n=r(19),o=r(24),c=r(83),i=function(t){return function(e,r,i){var a,u=n(e),s=o(u.length),f=c(i,s);if(t&&r!=r){for(;s>f;)if((a=u[f++])!=a)return!0}else for(;s>f;f++)if((t||f in u)&&u[f]===r)return t||f||0;return!t&&-1}};t.exports={includes:i(!0),indexOf:i(!1)}},function(t,e,r){var n=r(9);t.exports=n.Promise},function(t,e,r){var n=r(23);t.exports=function(t,e,r){for(var o in e)n(t,o,e[o],r);return t}},function(t,e,r){"use strict";var n=r(36),o=r(18),c=r(8),i=r(13),a=c("species");t.exports=function(t){var e=n(t),r=o.f;i&&e&&!e[a]&&r(e,a,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,r){if(!(t instanceof e))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return t}},function(t,e,r){var n=r(14),o=r(86),c=r(24),i=r(49),a=r(87),u=r(88),s=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,r,f,l){var p,d,y,h,v,g,b,m=i(e,r,f?2:1);if(l)p=t;else{if("function"!=typeof(d=a(t)))throw TypeError("Target is not iterable");if(o(d)){for(y=0,h=c(t.length);h>y;y++)if((v=f?m(n(b=t[y])[0],b[1]):m(t[y]))&&v instanceof s)return v;return new s(!1)}p=d.call(t)}for(g=p.next;!(b=g.call(p)).done;)if("object"==typeof(v=u(p,m,b.value,f))&&v&&v instanceof s)return v;return new s(!1)}).stop=function(t){return new s(!0,t)}},function(t,e,r){var n=r(14),o=r(40),c=r(8)("species");t.exports=function(t,e){var r,i=n(t).constructor;return void 0===i||null==(r=n(i)[c])?e:o(r)}},function(t,e,r){var n,o,c,i,a,u,s,f,l=r(9),p=r(35).f,d=r(33),y=r(90).set,h=r(92),v=l.MutationObserver||l.WebKitMutationObserver,g=l.process,b=l.Promise,m="process"==d(g),O=p(l,"queueMicrotask"),w=O&&O.value;w||(n=function(){var t,e;for(m&&(t=g.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?i():c=void 0,t}}c=void 0,t&&t.enter()},m?i=function(){g.nextTick(n)}:v&&!h?(a=!0,u=document.createTextNode(""),new v(n).observe(u,{characterData:!0}),i=function(){u.data=a=!a}):b&&b.resolve?(s=b.resolve(void 0),f=s.then,i=function(){f.call(s,n)}):i=function(){y.call(l,n)}),t.exports=w||function(t){var e={fn:t,next:void 0};c&&(c.next=e),o||(o=e,i()),c=e}},function(t,e,r){var n=r(14),o=r(17),c=r(94);t.exports=function(t,e){if(n(t),o(e)&&e.constructor===t)return e;var r=c.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){var n=r(9);t.exports=function(t,e){var r=n.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,r){"use strict";var n=r(11);function o(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=n((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=n((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},function(t,e,r){"use strict";r(50);var n=r(23),o=r(11),c=r(8),i=r(70),a=r(21),u=c("species"),s=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),f="$0"==="a".replace(/./,"$0"),l=c("replace"),p=!!/./[l]&&""===/./[l]("a","$0"),d=!o((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]}));t.exports=function(t,e,r,l){var y=c(t),h=!o((function(){var e={};return e[y]=function(){return 7},7!=""[t](e)})),v=h&&!o((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[u]=function(){return r},r.flags="",r[y]=/./[y]),r.exec=function(){return e=!0,null},r[y](""),!e}));if(!h||!v||"replace"===t&&(!s||!f||p)||"split"===t&&!d){var g=/./[y],b=r(y,""[t],(function(t,e,r,n,o){return e.exec===i?h&&!o?{done:!0,value:g.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}}),{REPLACE_KEEPS_$0:f,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:p}),m=b[0],O=b[1];n(String.prototype,t,m),n(RegExp.prototype,y,2==e?function(t,e){return O.call(t,this,e)}:function(t){return O.call(t,this)})}l&&a(RegExp.prototype[y],"sham",!0)}},function(t,e,r){"use strict";var n=r(96).charAt;t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},function(t,e,r){var n=r(33),o=r(70);t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var c=r.call(t,e);if("object"!=typeof c)throw TypeError("RegExp exec method returned something other than an Object or null");return c}if("RegExp"!==n(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},function(t,e,r){var n=r(13),o=r(18),c=r(14),i=r(52);t.exports=n?Object.defineProperties:function(t,e){c(t);for(var r,n=i(e),a=n.length,u=0;a>u;)o.f(t,r=n[u++],e[r]);return t}},function(t,e,r){var n=r(19),o=r(65).f,c={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return i&&"[object Window]"==c.call(t)?function(t){try{return o(t)}catch(t){return i.slice()}}(t):o(n(t))}},function(t,e,r){var n=r(40),o=r(34),c=r(46),i=r(24),a=function(t){return function(e,r,a,u){n(r);var s=o(e),f=c(s),l=i(s.length),p=t?l-1:0,d=t?-1:1;if(a<2)for(;;){if(p in f){u=f[p],p+=d;break}if(p+=d,t?p<0:l<=p)throw TypeError("Reduce of empty array with no initial value")}for(;t?p>=0:l>p;p+=d)p in f&&(u=r(u,f[p],p,s));return u}};t.exports={left:a(!1),right:a(!0)}},function(t,e,r){"use strict";var n=r(49),o=r(34),c=r(88),i=r(86),a=r(24),u=r(54),s=r(87);t.exports=function(t){var e,r,f,l,p,d,y=o(t),h="function"==typeof this?this:Array,v=arguments.length,g=v>1?arguments[1]:void 0,b=void 0!==g,m=s(y),O=0;if(b&&(g=n(g,v>2?arguments[2]:void 0,2)),null==m||h==Array&&i(m))for(r=new h(e=a(y.length));e>O;O++)d=b?g(y[O],O):y[O],u(r,O,d);else for(p=(l=m.call(y)).next,r=new h;!(f=p.call(l)).done;O++)d=b?c(l,g,[f.value,O],!0):f.value,u(r,O,d);return r.length=O,r}},function(t,e,r){var n=r(8),o=r(72),c=r(18),i=n("unscopables"),a=Array.prototype;null==a[i]&&c.f(a,i,{configurable:!0,value:o(null)}),t.exports=function(t){a[i][t]=!0}},function(t,e,r){"use strict";var n=r(104).IteratorPrototype,o=r(72),c=r(38),i=r(48),a=r(41),u=function(){return this};t.exports=function(t,e,r){var s=e+" Iterator";return t.prototype=o(n,{next:c(1,r)}),i(t,s,!1,!0),a[s]=u,t}},function(t,e,r){var n=r(11);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,r){var n=r(14),o=r(141);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),e=r instanceof Array}catch(t){}return function(r,c){return n(r),o(c),e?t.call(r,c):r.__proto__=c,r}}():void 0)},function(t,e,r){var n=r(17);t.exports=function(t){if(!n(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,r){var n=r(12),o=r(143).values;n({target:"Object",stat:!0},{values:function(t){return o(t)}})},function(t,e,r){var n=r(13),o=r(52),c=r(19),i=r(64).f,a=function(t){return function(e){for(var r,a=c(e),u=o(a),s=u.length,f=0,l=[];s>f;)r=u[f++],n&&!i.call(a,r)||l.push(t?[r,a[r]]:a[r]);return l}};t.exports={entries:a(!0),values:a(!1)}},function(t,e,r){"use strict";var n=r(16),o=r(106),c=r(145),i=r(112);function a(t){var e=new c(t),r=o(c.prototype.request,e);return n.extend(r,c.prototype,e),n.extend(r,e),r}var u=a(r(109));u.Axios=c,u.create=function(t){return a(i(u.defaults,t))},u.Cancel=r(113),u.CancelToken=r(159),u.isCancel=r(108),u.all=function(t){return Promise.all(t)},u.spread=r(160),t.exports=u,t.exports.default=u},function(t,e,r){"use strict";var n=r(16),o=r(107),c=r(146),i=r(147),a=r(112);function u(t){this.defaults=t,this.interceptors={request:new c,response:new c}}u.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[i,void 0],r=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)r=r.then(e.shift(),e.shift());return r},u.prototype.getUri=function(t){return t=a(this.defaults,t),o(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(t){u.prototype[t]=function(e,r){return this.request(a(r||{},{method:t,url:e,data:(r||{}).data}))}})),n.forEach(["post","put","patch"],(function(t){u.prototype[t]=function(e,r,n){return this.request(a(n||{},{method:t,url:e,data:r}))}})),t.exports=u},function(t,e,r){"use strict";var n=r(16);function o(){this.handlers=[]}o.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){n.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=o},function(t,e,r){"use strict";var n=r(16),o=r(148),c=r(108),i=r(109);function a(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return a(t),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=n.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||i.adapter)(t).then((function(e){return a(t),e.data=o(e.data,e.headers,t.transformResponse),e}),(function(e){return c(e)||(a(t),e&&e.response&&(e.response.data=o(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},function(t,e,r){"use strict";var n=r(16);t.exports=function(t,e,r){return n.forEach(r,(function(r){t=r(t,e)})),t}},function(t,e){var r,n,o=t.exports={};function c(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===c||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:c}catch(t){r=c}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(t){n=i}}();var u,s=[],f=!1,l=-1;function p(){f&&u&&(f=!1,u.length?s=u.concat(s):l=-1,s.length&&d())}function d(){if(!f){var t=a(p);f=!0;for(var e=s.length;e;){for(u=s,s=[];++l<e;)u&&u[l].run();l=-1,e=s.length}u=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function y(t,e){this.fun=t,this.array=e}function h(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];s.push(new y(t,e)),1!==s.length||f||a(d)},y.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,r){"use strict";var n=r(16);t.exports=function(t,e){n.forEach(t,(function(r,n){n!==e&&n.toUpperCase()===e.toUpperCase()&&(t[e]=r,delete t[n])}))}},function(t,e,r){"use strict";var n=r(111);t.exports=function(t,e,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?e(n("Request failed with status code "+r.status,r.config,null,r.request,r)):t(r)}},function(t,e,r){"use strict";t.exports=function(t,e,r,n,o){return t.config=e,r&&(t.code=r),t.request=n,t.response=o,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},function(t,e,r){"use strict";var n=r(16);t.exports=n.isStandardBrowserEnv()?{write:function(t,e,r,o,c,i){var a=[];a.push(t+"="+encodeURIComponent(e)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(o)&&a.push("path="+o),n.isString(c)&&a.push("domain="+c),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,r){"use strict";var n=r(155),o=r(156);t.exports=function(t,e){return t&&!n(e)?o(t,e):e}},function(t,e,r){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,r){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,r){"use strict";var n=r(16),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,r,c,i={};return t?(n.forEach(t.split("\n"),(function(t){if(c=t.indexOf(":"),e=n.trim(t.substr(0,c)).toLowerCase(),r=n.trim(t.substr(c+1)),e){if(i[e]&&o.indexOf(e)>=0)return;i[e]="set-cookie"===e?(i[e]?i[e]:[]).concat([r]):i[e]?i[e]+", "+r:r}})),i):i}},function(t,e,r){"use strict";var n=r(16);t.exports=n.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(t){var n=t;return e&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return t=o(window.location.href),function(e){var r=n.isString(e)?o(e):e;return r.protocol===t.protocol&&r.host===t.host}}():function(){return!0}},function(t,e,r){"use strict";var n=r(113);function o(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var r=this;t((function(t){r.reason||(r.reason=new n(t),e(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o((function(e){t=e})),cancel:t}},t.exports=o},function(t,e,r){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},function(t,e,r){"use strict";r.r(e);r(20),r(63),r(69),r(50),r(71),r(1),r(0),r(2),r(3),r(4),r(5),r(6),r(7),r(10);var n=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <div ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </div>\n  ")},o=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <h1 ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </h1>\n  ")},c=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <button ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </button>\n  ")},i=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <form ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </form>\n  ")},a=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <label ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </label>\n  ")},u=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <input ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </input>\n  ")},s=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <select ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </select>\n  ")},f=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="selected"===n?"selected":"".concat(n,'="').concat(e[n],'" ');return"\n    <option ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </option>\n  ")},l=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <svg ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </svg>\n  ")},p=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <g ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </g>\n  ")},d=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <line ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </line>\n  ")},y=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <text ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </text>\n  ")},h=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <circle ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </circle>\n  ")},v=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="";for(var n in e)r+="".concat(n,'="').concat(e[n],'" ');return"\n    <img ".concat(r,">\n      ").concat(t.reduce((function(t,e){return t+e}),""),"\n    </img>\n  ")};function g(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function b(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?g(Object(r),!0).forEach((function(e){m(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function m(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var O=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=document.cookie.match("(^|;) ?authorization=([^;]*)(;|$)");return r?r[2]&&n(t,b(b({},e),{},{class:"signout ".concat(e.class&&e.class),style:"".concat(w," ").concat(e.style&&e.style)})):""},w="\n  position: absolute;\n  right: 0;\n  margin-right: 2rem;\n  font-size: 1.2rem;\n";function j(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function x(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?j(Object(r),!0).forEach((function(e){P(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):j(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function P(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var S="\n  display: flex;\n  position: sticky;\n  background: #36cfc9;\n  top: 0;\n  min-width: 100%;\n  justify-content: center;\n  align-items: center;\n  color: #fff;\n  border-bottom: solid 2px #e8e8e8;\n  box-shadow: 0 0 3rem #f3f1f1;\n",E=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n([o(t,{class:"title"}),O(["로그아웃"])],x(x({},e),{},{class:"header ".concat(e.class&&e.class),style:"".concat(S," ").concat(e.style&&e.style)}))};function k(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function D(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?k(Object(r),!0).forEach((function(e){A(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):k(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function A(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var T="\n",L=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=document.cookie.match("(^|;) ?authorization=([^;]*)(;|$)");return r?r[2]&&n([E(["다이어터"]),Lt(),zt([Ht(["내역"],{id:"main",class:"selected-page"}),Ht(["달력"],{id:"calendar"}),Ht(["통계"],{id:"graph"})]),n(t,{class:"content"})],D(D({},e),{},{class:"app ".concat(e.class&&e.class),style:"".concat(T," ").concat(e.style&&e.style)})):n([E(["다이어터"]),n(t,{class:"content"})],D(D({},e),{},{class:"app ".concat(e.class&&e.class),style:"".concat(T," ").concat(e.style&&e.style)}))};r(102),r(74),r(25),r(26),r(27),r(22),r(28),r(29),r(30),r(31),r(32);function R(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function I(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?R(Object(r),!0).forEach((function(e){C(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):R(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function C(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var M=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n(t,I(I({},e),{},{class:"calendar-day ".concat(e.class&&e.class),style:"".concat(_," ").concat(e.style&&e.style)}))},_="\n  width: 8rem;\n  border: 1px solid black;\n  text-align: center;\n";function N(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function U(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?N(Object(r),!0).forEach((function(e){F(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):N(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function F(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var q=function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=["일","월","화","수","목","금","토"];return n([e.map((function(t){return M([t])})).join("")],U(U({},t),{},{class:"calendar-days ".concat(t.class&&t.class),style:"".concat(B," ").concat(t.style&&t.style)}))},B="\n  display: flex;\n";function H(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function z(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?H(Object(r),!0).forEach((function(e){G(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):H(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function G(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function $(t){return function(t){if(Array.isArray(t))return Y(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return Y(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Y(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Y(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var V=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n([n([q(),n($(t),{class:"calendar-dates"})],{class:"calendar-body"})],z(z({},e),{},{class:"calendar-body ".concat(e.class&&e.class),style:"".concat(K," ").concat(e.style&&e.style)}))},K="\n  display: flex;\n  border: 1px solid black;\n  object-fit: contain;\n  margin: auto;\n";function X(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function J(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?X(Object(r),!0).forEach((function(e){W(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):X(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function W(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var Q="\n  display: flex;\n";function Z(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function tt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Z(Object(r),!0).forEach((function(e){et(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Z(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function et(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var rt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n(t,tt(tt({},e),{},{class:"calendar-date ".concat(e.class&&e.class),style:"".concat(nt," ").concat(e.style&&e.style)}))},nt="\n  width: 8rem;\n  height: 8rem;\n  border: 1px solid black;\n";function ot(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function ct(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ot(Object(r),!0).forEach((function(e){it(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ot(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function it(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var at={},ut=function(t,e){at[t]=ct(ct({},at[t]),{},{eventHandler:e})},st=function(t){return at[t].data},ft=function(t,e){at[t]=ct(ct({},at[t]),{},{data:e}),at[t].hasOwnProperty("eventHandler")&&at[t].eventHandler(at[t].data)},lt=function(t){var e=t.getFullYear(),r=1+t.getMonth();r=r>=10?r:"0"+r;var n=t.getDate();return e+"-"+r+"-"+(n=n>=10?n:"0"+n)},pt=function(t,e){return new Date(t.date).getTime()<new Date(e.date).getTime()?1:-1},dt=function(){return st("kcalData").sort(pt).reduce((function(t,e){if(t.hasOwnProperty(e.date)){if("intake"===e.type){var r=t[e.date]+e.kcal;return t[e.date]=r,t}var n=t[e.date]-e.kcal;return t[e.date]=n,t}if("intake"===e.type){var o=e.kcal;return t[e.date]=o,t}var c=-e.kcal;return t[e.date]=c,t}),{})},yt=r.p+"09c34de951b6ce6850776145adeba9f4.svg",ht=r.p+"57fad95c7dfb0d62adbf9a3892838af8.svg",vt=r.p+"2b8d510d779438146d14312c2d6118ff.svg",gt=r.p+"21d53fc8c1d6f370f26f3322f43aa670.svg";function bt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function mt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?bt(Object(r),!0).forEach((function(e){Ot(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):bt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ot(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var wt="\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: 3rem auto;\n",jt=function(t,e){for(var r=new Date(t,e-1,1),o=r.getDay(),c=new Date(r.getFullYear(),r.getMonth()+1,0).getDate(),i=new Date(r.getFullYear(),r.getMonth(),0).getDate(),a=1,u=1,s=[],f=["sun","mon","tue","wed","thu","fri","sat"],l=dt(),p=0;p<5;p++){for(var d=[],y=0;y<7;y++)if(0===p&&y<o){var h=lt(new Date(r.getFullYear(),r.getMonth()-1,i-(o-1)+y)),v=l[h]?xt(l[h]):"";d.push(rt(["".concat(i-(o-1)+y),v],{class:"past ".concat(f[y]),id:lt(new Date(r.getFullYear(),r.getMonth()-1,i-(o-1)+y)),style:"color: gray"}))}else if(p>=0&&a<=c){var g=lt(new Date(t,e-1,a)),b=l[g]?xt(l[g]):"";d.push(rt(["".concat(a),b],{class:"".concat(f[y]),id:lt(new Date(t,e-1,a)),style:"color: ".concat("sun"===f[y]?"red":"sat"===f[y]&&"blue")})),a+=1}else if(a>c){var m=lt(new Date(r.getFullYear(),r.getMonth()+1,u)),O=l[m]?xt(l[m]):"";d.push(rt(["".concat(u),O],{class:"future ".concat(f[y]),id:lt(new Date(r.getFullYear(),r.getMonth()+1,u)),style:"color: gray"})),u+=1}s.push(d.join(""))}return s.map((function(t){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n(t,J(J({},e),{},{class:"calendar-week ".concat(e.class&&e.class),style:"".concat(Q," ").concat(e.style&&e.style)}))}([t])})).join("")},xt=function(t){return n(t>=3500?[v([],{src:ht,style:Pt})]:t>2500?[v([],{src:vt,style:Pt})]:t>2e3?[v([],{src:yt,style:Pt})]:[v([],{src:gt,style:Pt})],{style:St})},Pt="\n  width: 80%;\n",St="\n  display: flex;\n  justify-content: center;\n",Et=function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=st("date").getFullYear(),r=st("date").getMonth()+1;return n([V([jt(e,r)])],mt(mt({},t),{},{class:"calendar ".concat(t.class&&t.class),style:"".concat(wt," ").concat(t.style&&t.style)}))};function kt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Dt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?kt(Object(r),!0).forEach((function(e){At(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):kt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function At(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var Tt="\n  display: flex;\n  justify-content: center;\n  margin: 2rem 0;\n",Lt=function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=st("date").getFullYear(),r=st("date").getMonth()+1;return n([c(["<"],{id:"prev-btn",class:"month-nav-btn",style:"background: none; border: none; font-size: 2rem; outline: none;",onmouseover:"this.style.color='#fa541c'",onmouseout:"this.style.color='black'"}),n(["".concat(e,"년 ").concat(r,"월")],{class:"current-year-month",style:"margin: 0 3rem; font-size: 1.5rem; font-weight: 600; line-height: 2;"}),c([">"],{id:"next-btn",class:"month-nav-btn",style:"background: none; border: none; font-size: 2rem; outline: none;",onmouseover:"this.style.color='#fa541c'",onmouseout:"this.style.color='black'"})],Dt(Dt({},t),{},{class:"month-nav ".concat(t.class&&t.class),style:"".concat(Tt," ").concat(t.style&&t.style)}))};function Rt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function It(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Rt(Object(r),!0).forEach((function(e){Ct(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Rt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ct(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var Mt="\n  cursor: pointer;\n  text-align: center;\n  width: 20%;\n  border: 3px solid #36cfc9;\n  outline: none;\n  padding: 5px;\n  font-size: 1rem;\n  font-weight: 600;\n  border-radius: 1rem;\n",_t="\n  background: #36cfc9;\n  color: #fff;\n",Nt="\n  background: #fff;\n  color: #36cfc9;\n";function Ut(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ft(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ut(Object(r),!0).forEach((function(e){qt(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ut(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function qt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var Bt="\n  text-align: center;\n  width: 50%;\n  margin: auto;\n",Ht=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return c(t,It(It({},e),{},{class:"nav-btn ".concat(e.class&&e.class),style:"".concat(Mt," ").concat(e.class&&"selected-page"===e.class?Nt:_t," ").concat(e.style&&e.style)}))},zt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n(t,Ft(Ft({},e),{},{class:"navigator ".concat(e.class&&e.class),style:"".concat(Bt," ").concat(e.style&&e.style)}))};function Gt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function $t(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Gt(Object(r),!0).forEach((function(e){Yt(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Gt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Yt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Vt(t){return function(t){if(Array.isArray(t))return Kt(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return Kt(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Kt(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kt(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Xt="\n  width: 50%;\n  margin: .5rem 0;\n",Jt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n([a([t.shift(0)],{style:"min-width: 18%; display: inline-block; font-weight: 600;"})].concat(Vt(t)),$t($t({},e),{},{class:"form-item ".concat(e.class&&e.class),style:"".concat(Xt," ").concat(e.style&&e.style)}))};function Wt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Qt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Wt(Object(r),!0).forEach((function(e){Zt(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Wt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Zt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var te="\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 2rem auto;\n  width: 50%;\n",ee="\n  width:75%;\n  box-sizing: border-box;\n  height: 2rem;\n  padding: 0 10px;\n  outline: none;\n",re="\n  height: 2rem;\n  width: 5rem;\n  outline: none;\n",ne="\n  color: #36cfc9;\n  background: #fff;\n  border: 2px solid #36cfc9;\n",oe="\n  background: #36cfc9;\n  color: #fff;\n  border: 2px solid #36cfc9;\n",ce="\n  height: 2rem;\n  background: #36cfc9;\n  color: #fff;\n  border: 2px solid #36cfc9;\n  outline: none;\n",ie=function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return i([Jt(["분류",c(["섭취"],{style:re+ne,class:"type-btn intake-btn isSelected",id:"intake"}),c(["소비"],{style:re+oe,class:"type-btn consumption-btn",id:"consumption"})]),le([Jt(["날짜",u([],{type:"date",value:lt(new Date),class:"date-picker",style:ee})]),Jt(["카테고리",s([f(["한식"]),f(["중식"],{selected:!0}),f(["일식"])],{style:ee,class:"category"})])]),le([Jt(["칼로리",u([],{type:"text",placeholder:"칼로리를 입력해주세요.",style:ee,class:"input-kcal"})]),Jt(["내용",u([],{type:"text",placeholder:"내용을 입력해주세요.",style:ee,class:"input-content"})])]),c(["등록"],{style:ce,class:"submit-btn"})],Qt(Qt({},t),{},{class:"form ".concat(t.class&&t.class),style:"".concat(te," ").concat(t.style&&t.style)}))};function ae(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function ue(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ae(Object(r),!0).forEach((function(e){se(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ae(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function se(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var fe="\n  display: flex;\n  justify-content: space-between;\n",le=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n(t,ue(ue({},e),{},{class:"row ".concat(e.class&&e.class),style:"".concat(fe," ").concat(e.style&&e.style)}))};function pe(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function de(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?pe(Object(r),!0).forEach((function(e){ye(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):pe(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function ye(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function he(t){return function(t){if(Array.isArray(t))return ve(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return ve(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return ve(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ve(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var ge=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n([].concat(he(t),[n(["소비"],{style:me}),n(["섭취"],{style:me})]),de(de({},e),{},{class:"date-title ".concat(e.class&&e.class),style:"".concat(be," ").concat(e.style&&e.style)}))},be="\n  display: grid;\n  grid-template-columns: 3fr 1fr 1fr;\n  padding: .5rem 1rem;\n  background: #36cfc9;\n  color: #fff;\n  font-weight: 600;\n",me="\n  text-align: center;\n";function Oe(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function we(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Oe(Object(r),!0).forEach((function(e){je(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Oe(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function je(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var xe=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n(t,we(we({},e),{},{class:"content ".concat(e.class&&e.class),style:"".concat(Pe," ").concat(e.style&&e.style)}))},Pe="\n  margin: right: auto;\n";function Se(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ee(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Se(Object(r),!0).forEach((function(e){ke(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Se(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function ke(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function De(t){return function(t){if(Array.isArray(t))return Ae(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return Ae(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Ae(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ae(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Te=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n(["+"].concat(De(t),["kcal"]),Ee(Ee({},e),{},{class:"intake ".concat(e.class&&e.class),style:"".concat(Le," ").concat(e.style&&e.style)}))},Le="\n  text-align: right;\n  color: red;\n";function Re(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ie(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Re(Object(r),!0).forEach((function(e){Ce(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Re(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ce(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Me(t){return function(t){if(Array.isArray(t))return _e(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return _e(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return _e(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _e(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Ne=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n(["-"].concat(Me(t),["kcal"]),Ie(Ie({},e),{},{class:"consumption ".concat(e.class&&e.class),style:"".concat(Ue," ").concat(e.style&&e.style)}))},Ue="\n  text-align: right;\n  color: blue;\n";function Fe(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function qe(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Fe(Object(r),!0).forEach((function(e){Be(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Fe(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Be(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var He=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n([xe([t[0]]),"consumption"===e.type?Ne([t[1]]):Te([t[1]])],qe(qe({},e),{},{class:"kcal-list ".concat(e.class&&e.class),style:"".concat(ze," ").concat("consumption"===e.type?Ge:$e," ").concat(e.style&&e.style)}))},ze="\n  display: grid;\n  padding: .5rem 1rem;\n  border-bottom: 1px solid lightgray;\n",Ge="\n  grid-template-columns: 2fr 1fr 1fr;\n",$e="\n  grid-template-columns: 2fr 2fr;\n";function Ye(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ve(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ye(Object(r),!0).forEach((function(e){Ke(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ye(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ke(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var Xe="\n  margin: auto;\n  width: 50%;\n",Je=He,We=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n([ge([e.date]),He([e.content,e.kcal],{type:e.type}),t],Ve(Ve({},e),{},{id:e.date,class:"date-list ".concat(e.class&&e.class),style:"".concat(Xe," ").concat(e.style&&e.style)}))};r(142);function Qe(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ze(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Qe(Object(r),!0).forEach((function(e){tr(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Qe(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function tr(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function er(t){return function(t){if(Array.isArray(t))return rr(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return rr(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return rr(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var nr="\n  display: flex;\n  justify-content: center;\n  margin: 3rem auto;\n",or=function(){var t=dt(),e=Math.max.apply(Math,er(Object.values(t))),r=[y([0],{x:"80",y:"373"})];for(var n in t)r.push(y([t[n]],{x:"80",y:String(15+358*(1-t[n]/e))}));return r},cr=function(){var t=dt(),e=Object.keys(t).map((function(t){return t.substr(8,2)+"일"}));return e.map((function(t,r){return y([t],{x:String(684-r/(e.length-1)*534),y:"400"})}))},ir=function(){var t=dt(),e=Math.max.apply(Math,er(Object.values(t))),r=Object.keys(t);return r.map((function(n,o){return h([],{cx:String(684-o/(r.length-1)*534),cy:String(15+358*(1-t[n]/e)),r:"4",value:t[n]})}))},ar=function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=[].concat(er(or()),[y(["kcal"],{class:"label-title",x:"25",y:"200"})]),r=[].concat(er(cr()),[y(["day"],{class:"label-title",x:"400",y:"440"})]),o=ir();return n([l([p([d([],{x1:"90",x2:"90",y1:"5",y2:"371"})],{class:"grid x-grid",id:"xGrid",style:"stroke: #ccc; stroke-dasharray: 0; stroke-width: 1;"}),p(e,{class:"labels y-labels",style:"font-weight: bold; font-size: 12px; fill: black; text-anchor: end; font-size: 13px;"}),p([d([],{x1:"90",x2:"705",y1:"370",y2:"370"})],{class:"grid y-grid",id:"yGrid",style:"stroke: #ccc; stroke-dasharray: 0; stroke-width: 1;"}),p(er(r),{class:"labels x-labels",style:"font-weight: bold; font-size: 12px; fill: black; text-anchor: middle; font-size: 13px;"}),p(o,{class:"data",style:"fill: red; stroke-width: 1;"})],{class:"graph",style:"height: 500px; width: 800px;"})],Ze(Ze({},t),{},{class:"graph-container ".concat(t.class&&t.class),style:"".concat(nr," ").concat(t.style&&t.style)}))};function ur(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function sr(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ur(Object(r),!0).forEach((function(e){fr(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ur(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function fr(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var lr="\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 2rem auto;\n  width: 30%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n",pr="\n  box-sizing: border-box;\n  height: 2rem;\n  padding: 0 10px;\n  outline: none;\n  width: 75%;\n",dr="\n  height: 2rem;\n  background: #36cfc9;\n  color: #fff;\n  border: 2px solid #36cfc9;\n  outline: none;\n  margin: 2rem auto;\n  width: 100%;\n",yr=function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return i([Jt(["아이디",u([],{type:"text",placeholder:"아이디를 입력해주세요.",style:pr,class:"input-id"})],{style:"width: 100%;"}),Jt(["비밀번호",u([],{type:"password",placeholder:"비밀번호를 입력해주세요.",style:pr,class:"input-pw"})],{style:"width: 100%;"}),c(["로그인"],{style:dr,class:"login-btn"})],sr(sr({},t),{},{class:"form ".concat(t.class&&t.class),style:"".concat(lr," ").concat(t.style&&t.style)}))};function hr(t){return function(t){if(Array.isArray(t))return vr(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return vr(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return vr(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var gr=function(){var t=st("kcalData").sort(pt).reduce((function(t,e){if(t.hasOwnProperty(e.date)){var r=[].concat(hr(t[e.date]),[e]);return t[e.date]=r,t}var n=[e];return t[e.date]=n,t}),{}),e="";for(var r in t){var n=t[r].shift();e+=We([t[r].reduce((function(t,e){return t+Je([e.content,e.kcal],{type:e.type})}),"")],{type:n.type,category:n.category,kcal:n.kcal,content:n.content,date:n.date})}return e},br=function(){var t=gr();return n([ie(),t],{class:"main-page"})},mr=function(){return n([yr()],{class:"login-page"})},Or=function(){return n([Et()],{class:"calendar-page"})},wr=function(){return n([ar()],{class:"graph-page"})},jr="".concat("http://localhost",":").concat("3000","/api")||!1,xr=r(114),Pr=r.n(xr).a.create({baseURL:jr,headers:{Accept:"application/json"},withCredentials:!0});function Sr(t){return function(t){if(Array.isArray(t))return Er(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return Er(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Er(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Er(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function kr(t,e,r,n,o,c,i){try{var a=t[c](i),u=a.value}catch(t){return void r(t)}a.done?e(u):Promise.resolve(u).then(n,o)}function Dr(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var c=t.apply(e,r);function i(t){kr(c,n,o,i,a,"next",t)}function a(t){kr(c,n,o,i,a,"throw",t)}i(void 0)}))}}var Ar=function(){var t=Dr(regeneratorRuntime.mark((function t(e){var r,n,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:window.history.pushState({page:e},null,"#".concat(e)),r=window.history.state.page,n=document.querySelector(".selected-page"),o=document.getElementById(e),"main"===r?document.querySelector(".content").innerHTML=br():"calendar"===r?document.querySelector(".content").innerHTML=Or():"graph"===r?document.querySelector(".content").innerHTML=wr():"login"===r&&(document.querySelector(".content").innerHTML=mr()),n.style.background="#36cfc9",n.style.color="#fff",o.style.background="#fff",o.style.color="#36cfc9",n.classList.remove("selected-page"),o.classList.add("selected-page");case 11:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Tr=function(){var t=Dr(regeneratorRuntime.mark((function t(){var e,r,n,o,c,i;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=document.querySelector(".isSelected").id,r=document.querySelector(".category").value,n=document.querySelector(".date-picker").value,o=document.querySelector(".input-content").value,c=document.querySelector(".input-kcal").value,t.next=7,Pr.post("/kcals",{type:e,date:n,category:r,kcal:parseInt(c),content:o});case 7:(i=t.sent).data.result.success?ft("kcalData",[].concat(Sr(st("kcalData")),[i.data.result.kcal])):alert("칼로리 등록에 실패하였습니다.");case 9:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),Lr=function(){var t=Dr(regeneratorRuntime.mark((function t(){var e,r,n,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=document.querySelector(".input-id").value,r=document.querySelector(".input-pw").value,n={email:e,password:r},t.next=5,Pr.post("/users/email",n);case 5:if(!t.sent.data.result.success){t.next=15;break}return t.next=9,Rr();case 9:o=t.sent,ft("kcalData",o),document.querySelector(".app").innerHTML=L([br()]),t.next=16;break;case 15:alert("로그인에 실패하였습니다.");case 16:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),Rr=function(){var t=Dr(regeneratorRuntime.mark((function t(){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Pr.get("/kcals");case 2:if(!(e=t.sent).data.result.success){t.next=5;break}return t.abrupt("return",e.data.result.kcals);case 5:return t.abrupt("return",[]);case 6:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),Ir=function(){document.getElementById("root").addEventListener("click",function(){var t=Dr(regeneratorRuntime.mark((function t(e){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.target.closest(".nav-btn")?(e.preventDefault(),Ar(e.target.id)):e.target.closest(".month-nav-btn")?(e.preventDefault(),u=e.target.id,s=void 0,l=void 0,s=st("date").getMonth(),l=st("date").getFullYear(),"prev-btn"===u?(s-=1)<0&&(s=11,l-=1):"next-btn"===u&&(s+=1)>11&&(s=0,l+=1),ft("date",new Date(l,s,1))):e.target.closest(".type-btn")?(e.preventDefault(),r=e.target.classList,n=void 0,o=void 0,c=void 0,i=void 0,a=void 0,n=document.querySelector(".intake-btn"),o=document.querySelector(".consumption-btn"),c=document.querySelector(".category"),i="height: 2rem; width: 5rem; outline: none; color: #36cfc9; background: #fff; border: 2px solid #36cfc9;",a="height: 2rem; width: 5rem; outline: none; background: #36cfc9; color: #fff; border: 2px solid #36cfc9;",r.contains("intake-btn")?(n.setAttribute("style",i),o.setAttribute("style",a),n.classList.toggle("isSelected"),o.classList.toggle("isSelected"),c.innerHTML=f(["한식"])+f(["중식"])+f(["일식"])):(n.setAttribute("style",a),o.setAttribute("style",i),n.classList.toggle("isSelected"),o.classList.toggle("isSelected"),c.innerHTML=f(["유산소 운동"])+f(["근력 운동"]))):e.target.closest(".submit-btn")?(e.preventDefault(),Tr()):e.target.closest(".login-btn")?(e.preventDefault(),Lr()):e.target.closest(".get-btn")&&(e.preventDefault(),onGetHandler());case 1:case"end":return t.stop()}var r,n,o,c,i,a,u,s,l}),t)})));return function(e){return t.apply(this,arguments)}}())},Cr=function(t){document.querySelector(".current-year-month").innerHTML="\n    ".concat(t.getFullYear(),"년 ").concat(t.getMonth()+1,"월\n  "),"#calendar"===location.hash&&(document.querySelector(".calendar-page").innerHTML=Et())},Mr=function(t){"#main"===location.hash?window.location.reload():location.hash};function _r(t,e,r,n,o,c,i){try{var a=t[c](i),u=a.value}catch(t){return void r(t)}a.done?e(u):Promise.resolve(u).then(n,o)}var Nr,Ur=function(){var t,e=(t=regeneratorRuntime.mark((function t(){var e,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(ft("date",new Date),ut("date",Cr),Ir(),!(e=document.cookie.match("(^|;) ?authorization=([^;]*)(;|$)"))){t.next=13;break}return t.next=7,Rr();case 7:return r=t.sent,ft("kcalData",r),ut("kcalData",Mr),t.abrupt("return",e[2]&&L([br()]));case 13:return t.abrupt("return",L([mr()]));case 14:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,o){var c=t.apply(e,r);function i(t){_r(c,n,o,i,a,"next",t)}function a(t){_r(c,n,o,i,a,"throw",t)}i(void 0)}))});return function(){return e.apply(this,arguments)}}();function Fr(t,e,r,n,o,c,i){try{var a=t[c](i),u=a.value}catch(t){return void r(t)}a.done?e(u):Promise.resolve(u).then(n,o)}(Nr=regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Ur();case 2:document.getElementById("root").innerHTML=t.sent;case 3:case"end":return t.stop()}}),t)})),function(){var t=this,e=arguments;return new Promise((function(r,n){var o=Nr.apply(t,e);function c(t){Fr(o,r,n,c,i,"next",t)}function i(t){Fr(o,r,n,c,i,"throw",t)}c(void 0)}))})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWdzL0Rpdi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWdzL0gxLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RhZ3MvQnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RhZ3MvRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWdzL0xhYmVsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RhZ3MvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGFncy9TZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGFncy9PcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGFncy9TdmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGFncy9HLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RhZ3MvTGluZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWdzL1RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGFncy9DaXJjbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGFncy9JbWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL1NpZ25vdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGF5b3V0L0xheW91dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MYXlvdXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FsZW5kYXIvQ2FsZW5kYXJEYXkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FsZW5kYXIvQ2FsZW5kYXJEYXlzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhbGVuZGFyL0NhbGVuZGFyQm9keS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYWxlbmRhci9DYWxlbmRhcldlZWsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FsZW5kYXIvQ2FsZW5kYXJEYXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZGF0ZS1mb3JtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2RhdGUtc29ydGluZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMva2NhbC1jYWxjdWxhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvaW1hZ2VzL25vcm1hbC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9pbWFnZXMvb2Jlc2l0eS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9pbWFnZXMvb3Zlci5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9pbWFnZXMvdW5kZXIuc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhbGVuZGFyL0NhbGVuZGFyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhbGVuZGFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL01vbnRoTmF2L01vbnRoTmF2LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL01vbnRoTmF2L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL05hdmlnYXRvci9OYXZCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTmF2aWdhdG9yL05hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRm9ybUl0ZW0vRm9ybUl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRm9ybUl0ZW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmVnaXN0ZXJGb3JtL1JlZ2lzdGVyRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9SZWdpc3RlckZvcm0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUm93L1Jvdy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Sb3cvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRGF0ZUxpc3QvRGF0ZVRpdGxlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0RhdGVMaXN0L0NvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRGF0ZUxpc3QvSW50YWtlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0RhdGVMaXN0L0NvbnN1bXB0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0RhdGVMaXN0L0tjYWxMaXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0RhdGVMaXN0L0RhdGVMaXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0RhdGVMaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0dyYXBoL0dyYXBoLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0dyYXBoL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xvZ2luRm9ybS9Mb2dpbkZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTG9naW5Gb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9tYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9sb2dpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvY2FsZW5kYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL2dyYXBoLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnQtaGFuZGxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnQtaGFuZGxlci9zdG9yZS1ldmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiJCIsImZhaWxzIiwiaXNBcnJheSIsImlzT2JqZWN0IiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsImNyZWF0ZVByb3BlcnR5IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIndlbGxLbm93blN5bWJvbCIsIlY4X1ZFUlNJT04iLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsIklTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQiLCJhcnJheSIsImNvbmNhdCIsIlNQRUNJRVNfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsIk8iLCJzcHJlYWRhYmxlIiwidW5kZWZpbmVkIiwidGFyZ2V0IiwicHJvdG8iLCJmb3JjZWQiLCJhcmciLCJrIiwibGVuZ3RoIiwibGVuIiwiRSIsInRoaXMiLCJBIiwiYXJndW1lbnRzIiwiVHlwZUVycm9yIiwiZ2xvYmFsIiwiZ2V0QnVpbHRJbiIsIklTX1BVUkUiLCJERVNDUklQVE9SUyIsIk5BVElWRV9TWU1CT0wiLCJVU0VfU1lNQk9MX0FTX1VJRCIsImhhcyIsImFuT2JqZWN0IiwidG9JbmRleGVkT2JqZWN0IiwidG9QcmltaXRpdmUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJvYmplY3RLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJyZWRlZmluZSIsInNoYXJlZCIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJ1aWQiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwic2V0VG9TdHJpbmdUYWciLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiJGZvckVhY2giLCJmb3JFYWNoIiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwic2V0SW50ZXJuYWxTdGF0ZSIsInNldCIsImdldEludGVybmFsU3RhdGUiLCJnZXR0ZXJGb3IiLCJPYmplY3RQcm90b3R5cGUiLCIkU3ltYm9sIiwiJHN0cmluZ2lmeSIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImYiLCJuYXRpdmVEZWZpbmVQcm9wZXJ0eSIsIm5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMiLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkFsbFN5bWJvbHMiLCJPYmplY3RQcm90b3R5cGVTeW1ib2xzIiwiU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSIsIlN5bWJvbFRvU3RyaW5nUmVnaXN0cnkiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJRT2JqZWN0IiwiVVNFX1NFVFRFUiIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2NyaXB0b3IiLCJhIiwiUCIsIkF0dHJpYnV0ZXMiLCJPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yIiwid3JhcCIsInRhZyIsImRlc2NyaXB0aW9uIiwic3ltYm9sIiwidHlwZSIsImlzU3ltYm9sIiwiaXQiLCIkZGVmaW5lUHJvcGVydHkiLCIkZGVmaW5lUHJvcGVydGllcyIsIlByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwia2V5cyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJWIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIm5hbWVzIiwicmVzdWx0IiwicHVzaCIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJTdHJpbmciLCJzZXR0ZXIiLCJjb25maWd1cmFibGUiLCJ1bnNhZmUiLCJzaGFtIiwic3RhdCIsInN0cmluZyIsImtleUZvciIsInN5bSIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsImRlZmluZVByb3BlcnRpZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3RyaW5naWZ5IiwicmVwbGFjZXIiLCJzcGFjZSIsIiRyZXBsYWNlciIsImFyZ3MiLCJpbmRleCIsImFwcGx5IiwidmFsdWVPZiIsIiRmaWx0ZXIiLCJmaWx0ZXIiLCJhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCIsIkhBU19TUEVDSUVTX1NVUFBPUlQiLCJVU0VTX1RPX0xFTkdUSCIsImNhbGxiYWNrZm4iLCJGQUlMU19PTl9QUklNSVRJVkVTIiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJuYXRpdmVLZXlzIiwiRE9NSXRlcmFibGVzIiwiQ09MTEVDVElPTl9OQU1FIiwiQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJlcnJvciIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJNYXRoIiwiY2hlY2siLCJnbG9iYWxUaGlzIiwid2luZG93Iiwic2VsZiIsIkZ1bmN0aW9uIiwiJHJlZHVjZSIsImxlZnQiLCJhcnJheU1ldGhvZElzU3RyaWN0IiwiU1RSSUNUX01FVEhPRCIsIjEiLCJyZWR1Y2UiLCJleGVjIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwib3B0aW9ucyIsInNvdXJjZSIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJub1RhcmdldEdldCIsInRvU3RyaW5nIiwidmFsIiwiaXNVbmRlZmluZWQiLCJpc1BsYWluT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJpc0Z1bmN0aW9uIiwib2JqIiwiZm4iLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJjb25zdHJ1Y3RvciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJkb2N1bWVudCIsIm1lcmdlIiwiYXNzaWduVmFsdWUiLCJzbGljZSIsImV4dGVuZCIsImIiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsInJlcGxhY2UiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJjaGFyQ29kZUF0IiwiSUU4X0RPTV9ERUZJTkUiLCJJbmRleGVkT2JqZWN0IiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsImFkZFRvVW5zY29wYWJsZXMiLCJJdGVyYXRvcnMiLCJkZWZpbmVJdGVyYXRvciIsIkFycmF5IiwiaXRlcmF0ZWQiLCJraW5kIiwic3RhdGUiLCJkb25lIiwiQXJndW1lbnRzIiwiaW5zcGVjdFNvdXJjZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsIlRFTVBMQVRFIiwic3BsaXQiLCJzaW1wbGUiLCJqb2luIiwidG9JbnRlZ2VyIiwibWluIiwiYXJndW1lbnQiLCJOYXRpdmVTeW1ib2wiLCJFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUiLCJTeW1ib2xXcmFwcGVyIiwic3ltYm9sUHJvdG90eXBlIiwic3ltYm9sVG9TdHJpbmciLCJuYXRpdmUiLCJyZWdleHAiLCJkZXNjIiwiZnJvbSIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsIml0ZXJhYmxlIiwidG9BYnNvbHV0ZUluZGV4IiwiQUNDRVNTT1JTIiwiMCIsIlNQRUNJRVMiLCJuYXRpdmVTbGljZSIsIm1heCIsInN0YXJ0IiwiZW5kIiwiQ29uc3RydWN0b3IiLCJmaW4iLCJGdW5jdGlvblByb3RvdHlwZSIsIkZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmciLCJuYW1lUkUiLCJtYXRjaCIsImZsYWdzIiwiUmVnRXhwUHJvdG90eXBlIiwiUmVnRXhwIiwibmF0aXZlVG9TdHJpbmciLCJOT1RfR0VORVJJQyIsIklOQ09SUkVDVF9OQU1FIiwiUiIsInJmIiwiY2hhckF0IiwicG9pbnQiLCJBcnJheUl0ZXJhdG9yTWV0aG9kcyIsIklURVJBVE9SIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwidmFsdWVzIiwiTUVUSE9EX05BTUUiLCJwYXRoIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJiaXRtYXAiLCJ3cml0YWJsZSIsIk5BVElWRV9XRUFLX01BUCIsIm9iamVjdEhhcyIsIldlYWtNYXAiLCJzdG9yZSIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiU1RBVEUiLCJUWVBFIiwiY2FjaGUiLCJ0aHJvd2VyIiwiYXJndW1lbnQwIiwiYXJndW1lbnQxIiwiaW5wdXQiLCJQUkVGRVJSRURfU1RSSU5HIiwiY2xhc3NvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiVEFHIiwidGhhdCIsImludGVybmFsT2JqZWN0S2V5cyIsImVudW1CdWdLZXlzIiwiY3JlYXRlTWV0aG9kIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJzcGVjaWZpY0NyZWF0ZSIsImJvdW5kRnVuY3Rpb24iLCJtYXAiLCJzb21lIiwiZXZlcnkiLCJmaW5kIiwiZmluZEluZGV4IiwicHJvcGVydHlLZXkiLCJmb28iLCJCb29sZWFuIiwidGVzdCIsInZlcnNpb24iLCJjb3B5cmlnaHQiLCJFWElTVFMiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwiZnVuY3Rpb25Ub1N0cmluZyIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJQcm9taXNlV3JhcHBlciIsIm5hdGl2ZVRoZW4iLCJOYXRpdmVQcm9taXNlIiwicmVkZWZpbmVBbGwiLCJzZXRTcGVjaWVzIiwiYW5JbnN0YW5jZSIsIml0ZXJhdGUiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJ0YXNrIiwibWljcm90YXNrIiwicHJvbWlzZVJlc29sdmUiLCJob3N0UmVwb3J0RXJyb3JzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiUFJPTUlTRSIsImdldEludGVybmFsUHJvbWlzZVN0YXRlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwicHJvY2VzcyIsIiRmZXRjaCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiSVNfTk9ERSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiRk9SQ0VEIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwicHJvbWlzZSIsInJlc29sdmUiLCJGYWtlUHJvbWlzZSIsInRoZW4iLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiYWxsIiwiaXNUaGVuYWJsZSIsIm5vdGlmeSIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJjaGFpbiIsInJlYWN0aW9ucyIsIm9rIiwiZXhpdGVkIiwicmVhY3Rpb24iLCJoYW5kbGVyIiwiZmFpbCIsInJlamVjdCIsImRvbWFpbiIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiZW50ZXIiLCJleGl0Iiwib25VbmhhbmRsZWQiLCJyZWFzb24iLCJldmVudCIsImluaXRFdmVudCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsInBhcmVudCIsInVud3JhcCIsImludGVybmFsUmVqZWN0IiwiaW50ZXJuYWxSZXNvbHZlIiwid3JhcHBlciIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiQyIsImZldGNoIiwiUHJvbWlzZSIsImNhcGFiaWxpdHkiLCJ4IiwiJHByb21pc2VSZXNvbHZlIiwiY291bnRlciIsInJlbWFpbmluZyIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiTkFTSE9STl9CVUciLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInVzZXJBZ2VudCIsInZlcnNpb25zIiwidjgiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCJpdGVyYXRvclN5bWJvbCIsIml0ZXJhdG9yIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImRlZmluZSIsImVyciIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsIkVycm9yIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYXRvck1ldGhvZCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiaXRlciIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJzdGlja3lIZWxwZXJzIiwibmF0aXZlRXhlYyIsIm5hdGl2ZVJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsImxhc3RJbmRleCIsIlVOU1VQUE9SVEVEX1kiLCJCUk9LRU5fQ0FSRVQiLCJOUENHX0lOQ0xVREVEIiwicmVDb3B5IiwicmUiLCJzdGlja3kiLCJjaGFyc0FkZGVkIiwic3RyQ29weSIsImluZGV4T2YiLCJtdWx0aWxpbmUiLCJmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCJNQVRDSCIsIm5hdGl2ZU1hdGNoIiwibWF5YmVDYWxsTmF0aXZlIiwibWF0Y2hlciIsInJlcyIsInJ4IiwiUyIsImZ1bGxVbmljb2RlIiwidW5pY29kZSIsIm1hdGNoU3RyIiwiYWN0aXZlWERvY3VtZW50IiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsIkxUIiwiTnVsbFByb3RvT2JqZWN0IiwiQWN0aXZlWE9iamVjdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIkYiLCIkbWFwIiwiY2xhc3NvZlJhdyIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwidHJ5R2V0IiwiY2FsbGVlIiwiaW50ZWdlciIsInJlcGxhY2VtZW50IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInRvTG93ZXJDYXNlIiwiQXJyYXlQcm90b3R5cGUiLCJFTlRSSUVTIiwicmV0dXJuTWV0aG9kIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiSVNfSU9TIiwibG9jYXRpb24iLCJzZXRJbW1lZGlhdGUiLCJjbGVhciIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsInF1ZXVlIiwicnVuIiwicnVubmVyIiwibGlzdGVuZXIiLCJwb3N0IiwicG9zdE1lc3NhZ2UiLCJwcm90b2NvbCIsImhvc3QiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJpZ25vcmVDYXNlIiwiZG90QWxsIiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJmaXJzdCIsInNlY29uZCIsInBvc2l0aW9uIiwic2l6ZSIsImNvZGVBdCIsIk5BTUUiLCJvcmlnaW5hbEFycmF5IiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJuYXRpdmVKb2luIiwiRVMzX1NUUklOR1MiLCJzZXBhcmF0b3IiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiSXRlcmF0b3JzQ29yZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJyZXR1cm5UaGlzIiwiSXRlcmFibGUiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiREVGQVVMVCIsIklTX1NFVCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsIm1ldGhvZHMiLCJLRVkiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwiZW50cmllcyIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3IiLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJ1dGlscyIsImVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInVybCIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJ2IiwidG9JU09TdHJpbmciLCJKU09OIiwiaGFzaG1hcmtJbmRleCIsIl9fQ0FOQ0VMX18iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsImUiLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJjb21tb24iLCJzZXR0bGUiLCJjb29raWVzIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidW5lc2NhcGUiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwiYmFzZVVSTCIsInRvVXBwZXJDYXNlIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMktleXMiLCJtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyIsImRlZmF1bHRUb0NvbmZpZzJLZXlzIiwiZGlyZWN0TWVyZ2VLZXlzIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwicHJvcCIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsIkNhbmNlbCIsImciLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwiaW5jbHVkZXMiLCJDT05TVFJVQ1RPUl9OQU1FIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiUmVzdWx0Iiwic3RvcHBlZCIsIkFTX0VOVFJJRVMiLCJJU19JVEVSQVRPUiIsIml0ZXJGbiIsInN0ZXAiLCJkZWZhdWx0Q29uc3RydWN0b3IiLCJmbHVzaCIsImhlYWQiLCJsYXN0IiwidG9nZ2xlIiwibm9kZSIsIm1hY3JvdGFzayIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yIiwicXVldWVNaWNyb3Rhc2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwicHJvbWlzZUNhcGFiaWxpdHkiLCJjb25zb2xlIiwiUkUiLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJncm91cHMiLCJSRVBMQUNFX0tFRVBTXyQwIiwiUkVQTEFDRSIsIlJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsIm5hdGl2ZU1ldGhvZCIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmluZ01ldGhvZCIsInJlZ2V4TWV0aG9kIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsIklTX1JJR0hUIiwiYXJndW1lbnRzTGVuZ3RoIiwibWVtbyIsInJpZ2h0IiwiYXJyYXlMaWtlIiwibWFwZm4iLCJtYXBwaW5nIiwiVU5TQ09QQUJMRVMiLCJhUG9zc2libGVQcm90b3R5cGUiLCJDT1JSRUNUX1NFVFRFUiIsIiR2YWx1ZXMiLCJUT19FTlRSSUVTIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImluc3RhbmNlIiwiYXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJwcm9taXNlcyIsInNwcmVhZCIsImRlZmF1bHQiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInNoaWZ0IiwiZ2V0VXJpIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImgiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJmbnMiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJub29wIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJub3JtYWxpemVkTmFtZSIsImlzQXhpb3NFcnJvciIsInRvSlNPTiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInN0YWNrIiwiZXhwaXJlcyIsInNlY3VyZSIsImNvb2tpZSIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlcXVlc3RlZFVSTCIsInJlbGF0aXZlVVJMIiwiaWdub3JlRHVwbGljYXRlT2YiLCJwYXJzZWQiLCJsaW5lIiwic3Vic3RyIiwib3JpZ2luVVJMIiwibXNpZSIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsInJlcXVlc3RVUkwiLCJyZXNvbHZlUHJvbWlzZSIsInRva2VuIiwiY2FsbGJhY2siLCJhcnIiLCJEaXYiLCJjaGlsZHJlbiIsInByb3BzIiwic3RyUHJvcHMiLCJhY2MiLCJjaGlsZCIsIkgxIiwiQnV0dG9uIiwiRm9ybSIsIkxhYmVsIiwiSW5wdXQiLCJTZWxlY3QiLCJPcHRpb24iLCJTdmciLCJHIiwiTGluZSIsIlRleHQiLCJDaXJjbGUiLCJJbWciLCJTaWdub3V0IiwiY29va2llVmFsdWUiLCJjbGFzcyIsIlN0eWxlIiwiSGVhZGVyIiwiTGF5b3V0IiwiTW9udGhOYXYiLCJOYXZpZ2F0b3IiLCJOYXZCdXR0b24iLCJDYWxlbmRhckRheSIsIkNhbGVuZGFyRGF5cyIsImRheXMiLCJkYXkiLCJDYWxlbmRhckJvZHkiLCJDYWxlbmRhckRhdGUiLCJzZXRFdmVudCIsImV2ZW50SGFuZGxlciIsImdldFN0YXRlIiwic2V0U3RhdGUiLCJnZXRGb3JtYXREYXRlIiwiZGF0ZSIsInllYXIiLCJnZXRGdWxsWWVhciIsIm1vbnRoIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZGF0ZURlc2NlbmRpbmciLCJnZXRUaW1lIiwiZ2V0RGF5S2NhbCIsInNvcnQiLCJjdXIiLCJrY2FsIiwiY3JlYXRlQ2FsZW5kYXIiLCJmaXJzdERheSIsImdldERheSIsImxhc3REYXRlIiwicHJldkxhc3REYXRlIiwic3RhcnREYXlDb3VudCIsImxhc3REYXlDb3VudCIsIndlZWtMaXN0IiwiZW5fZGF5cyIsImRheUtjYWxEYXRhIiwiZGF5TGlzdCIsImoiLCJFbW9qaSIsImdldEVtb2ppIiwid2VlayIsIkNhbGVuZGFyV2VlayIsIk9iZXNpdHlFbW9qaSIsIkVtb2ppU3R5bGUiLCJPdmVyRW1vamkiLCJOb3JtYWxFbW9qaSIsIlVuZGVyRW1vamkiLCJFbW9qaUNvbnRhaW5lclN0eWxlIiwiQ2FsZW5kYXIiLCJvbm1vdXNlb3ZlciIsIm9ubW91c2VvdXQiLCJVbnNlbGVjdGVkU3R5bGUiLCJTZWxlY3RlZFN0eWxlIiwiRm9ybUl0ZW0iLCJJbnB1dFN0eWxlIiwiQnV0dG9uU3R5bGUiLCJpc1NlbGVjdGVkU3R5bGUiLCJ1blNlbGVjdGVkU3R5bGUiLCJTdWJtaXRCdXR0b25TdHlsZSIsIlJlZ2lzdGVyRm9ybSIsIlJvdyIsInNlbGVjdGVkIiwicGxhY2Vob2xkZXIiLCJEYXRlVGl0bGUiLCJTdWJUaXRsZVN0eWxlIiwiQ29udGVudCIsIkludGFrZSIsIkNvbnN1bXB0aW9uIiwiS2NhbExpc3QiLCJDb25zdW1wdGlvblN0eWxlIiwiSW50YWtlU3R5bGUiLCJfS2NhbExpc3QiLCJEYXRlTGlzdCIsImNyZWF0ZVZlcnRpY2FsR3JhcGgiLCJNQVhfVkFMVUUiLCJ5IiwiY3JlYXRlSG9yaXpvbnRhbEdyYXBoIiwiaWR4IiwiY3JlYXRlR3JhcGhDb250ZW50IiwiY3giLCJjeSIsIkdyYXBoIiwiVmVydGljYWxUZXh0IiwiSG9yaXpvbnRhbFRleHQiLCJHcmFwaENpcmxjZSIsIngxIiwieDIiLCJ5MSIsInkyIiwiTG9naW5Gb3JtIiwiY3JlYXRlRGF0ZUxpc3QiLCJzb3J0ZWRLY2FsRGF0YSIsIm5ld0FyciIsImNhdGVnb3J5IiwiTWFpblBhZ2UiLCJEYXRhTGlzdHMiLCJMb2dpblBhZ2UiLCJDYWxlbmRhclBhZ2UiLCJHcmFwaFBhZ2UiLCJBY2NlcHQiLCJvbk5hdkV2ZW50SGFuZGxlciIsInBhZ2UiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwic3RhdGVQYWdlIiwiJGN1cnJlbnROYXYiLCJxdWVyeVNlbGVjdG9yIiwiJG5ld05hdiIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwiYmFja2dyb3VuZCIsImNvbG9yIiwiY2xhc3NMaXN0IiwiYWRkIiwib25TdWJtaXRIYW5kbGVyIiwiQVBJIiwicGFyc2VJbnQiLCJzdWNjZXNzIiwiYWxlcnQiLCJvbkxvZ2luSGFuZGxlciIsImVtYWlsIiwib25Mb2FkRGF0YUhhbmRsZXIiLCJrY2FscyIsIm9uRXZlbnRIYW5kbGVyIiwiY2xvc2VzdCIsInByZXZlbnREZWZhdWx0IiwicHJldk5leHQiLCIkaW50YWtlIiwiJGNvbnN1bXB0aW9uIiwiJGNhdGVnb3J5IiwiU2VsZWN0U3R5bGUiLCJVbnNlbGVjdFN0eWxlIiwiY29udGFpbnMiLCJvbkdldEhhbmRsZXIiLCJvblN0b3JlRGF0ZUhhbmRsZXIiLCJvblN0b3JlTG9hZERhdGFIYW5kbGVyIiwicmVsb2FkIiwiQXBwIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9C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QUM5Z0IsR0FDZixVQUFsQmlCLFNBQVNxVixLQUNYNXdCLE9BQU91YixTQUFTOGYsU0FDUDlmLFNBQVNxVixNLDBIQ1B0QixJLEdBZ0JlMEssR0FoQk4sZSxFQUFBLEcsRUFBQSx5QkFBRyx3R0FDVjdILEdBQVMsT0FBUSxJQUFJaEUsTUFDckI2RCxHQUFTLE9BQVE2SCxJQUNqQlgsT0FFTWhJLEVBQWN0dkIsU0FBU3NzQixPQUFPMW9CLE1BQU0sc0NBTGhDLGlDQU9hd3pCLEtBUGIsY0FPRnA5QixFQVBFLE9BUVJ1MkIsR0FBUyxXQUFZdjJCLEdBQ3JCbzJCLEdBQVMsV0FBWThILElBVGIsa0JBVUQ1SSxFQUFZLElBQU1JLEVBQU8sQ0FBQytGLFFBVnpCLGlDQVlEL0YsRUFBTyxDQUFDaUcsUUFaUCwyQyxpTEFBSCxxRCw4SENOVCx5QkFBQyw2R0FDbUR5QyxLQURuRCxPQUNDcDRCLFNBQVN1MkIsZUFBZSxRQUFRQyxVQURqQyxpRCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxNjEpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJztcblxuLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4vLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgPSBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbnZhciBpc0NvbmNhdFNwcmVhZGFibGUgPSBmdW5jdGlvbiAoTykge1xuICBpZiAoIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzcHJlYWRhYmxlID0gT1tJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gIHJldHVybiBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KE8pO1xufTtcblxudmFyIEZPUkNFRCA9ICFJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIHx8ICFTUEVDSUVTX1NVUFBPUlQ7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBpc0NvbmNhdFNwcmVhZGFibGUgYW5kIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIHZhciBuID0gMDtcbiAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG4gICAgZm9yIChpID0gLTEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChpc0NvbmNhdFNwcmVhZGFibGUoRSkpIHtcbiAgICAgICAgbGVuID0gdG9MZW5ndGgoRS5sZW5ndGgpO1xuICAgICAgICBpZiAobiArIGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyssIG4rKykgaWYgKGsgaW4gRSkgY3JlYXRlUHJvcGVydHkoQSwgbiwgRVtrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobiA+PSBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQS5sZW5ndGggPSBuO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoaXQpIGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCAkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1ByaW1pdGl2ZShWLCB0cnVlKTtcbiAgdmFyIGVudW1lcmFibGUgPSBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBQKSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXModGhpcywgUCkgfHwgIWhhcyhBbGxTeW1ib2xzLCBQKSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF0gPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKGhpZGRlbktleXMsIGtleSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhcyhPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gIWFyZ3VtZW50cy5sZW5ndGggfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgdGFnID0gdWlkKGRlc2NyaXB0aW9uKTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlKSBzZXR0ZXIuY2FsbChPYmplY3RQcm90b3R5cGVTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2NyaXB0b3IodGhpcywgdGFnLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBVU0VfU0VUVEVSKSBzZXRTeW1ib2xEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiBzZXR0ZXIgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnLCBkZXNjcmlwdGlvbik7XG4gIH07XG5cbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS50YWc7XG4gIH0pO1xuXG4gIHJlZGVmaW5lKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdlbGxLbm93blN5bWJvbChuYW1lKSwgbmFtZSk7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtU3ltYm9sLWRlc2NyaXB0aW9uXG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhcyhTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9LFxuICAvLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KSB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBiZWhhdmlvciB3aXRoIHN5bWJvbHNcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG5pZiAoJHN0cmluZ2lmeSkge1xuICB2YXIgRk9SQ0VEX0pTT05fU1RSSU5HSUZZID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKCk7XG4gICAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAgICAgfHwgJHN0cmluZ2lmeSh7IGE6IHN5bWJvbCB9KSAhPSAne30nXG4gICAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgICAgfHwgJHN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT0gJ3t9JztcbiAgfSk7XG5cbiAgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9KU09OX1NUUklOR0lGWSB9LCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgICAgdmFyIGluZGV4ID0gMTtcbiAgICAgIHZhciAkcmVwbGFjZXI7XG4gICAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGluZGV4KSBhcmdzLnB1c2goYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICAgICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICAgIHJldHVybiAkc3RyaW5naWZ5LmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCEkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbn1cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2ZpbHRlcicpO1xuLy8gRWRnZSAxNC0gaXNzdWVcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIHx8ICFVU0VTX1RPX0xFTkdUSCB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBbXS5mb3JFYWNoICE9IGZvckVhY2ggfSwge1xuICBmb3JFYWNoOiBmb3JFYWNoXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoMSk7IH0pO1xudmFyIEZPUkNFRCA9ICFERVNDUklQVE9SUyB8fCBGQUlMU19PTl9QUklNSVRJVkVTO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSW5kZXhlZE9iamVjdChpdCksIGtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGtleSwgZGVzY3JpcHRvcjtcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkgPSBrZXlzW2luZGV4KytdKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUtleXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBrZXlzOiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXModG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufVxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhcyhXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpKSB7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzKFN5bWJvbCwgbmFtZSkpIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICBlbHNlIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8XG4gIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fFxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLmxlZnQ7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgncmVkdWNlJyk7XG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgncmVkdWNlJywgeyAxOiAwIH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT01cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlRGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25cbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcblxuaWYgKERFU0NSSVBUT1JTICYmIHR5cGVvZiBOYXRpdmVTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAoISgnZGVzY3JpcHRpb24nIGluIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcyBpbnN0YW5jZW9mIFN5bWJvbFdyYXBwZXJcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhTeW1ib2xXcmFwcGVyLCBOYXRpdmVTeW1ib2wpO1xuICB2YXIgc3ltYm9sUHJvdG90eXBlID0gU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wucHJvdG90eXBlO1xuICBzeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIG5hdGl2ZSA9IFN0cmluZyhOYXRpdmVTeW1ib2woJ3Rlc3QnKSkgPT0gJ1N5bWJvbCh0ZXN0KSc7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICBkZWZpbmVQcm9wZXJ0eShzeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSBpc09iamVjdCh0aGlzKSA/IHRoaXMudmFsdWVPZigpIDogdGhpcztcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZy5jYWxsKHN5bWJvbCk7XG4gICAgICBpZiAoaGFzKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIGRlc2MgPSBuYXRpdmUgPyBzdHJpbmcuc2xpY2UoNywgLTEpIDogc3RyaW5nLnJlcGxhY2UocmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBBcnJheS5mcm9tKGl0ZXJhYmxlKTtcbn0pO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdzbGljZScsIHsgQUNDRVNTT1JTOiB0cnVlLCAwOiAwLCAxOiAyIH0pO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIG5hdGl2ZVNsaWNlID0gW10uc2xpY2U7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICAvLyBpbmxpbmUgYEFycmF5U3BlY2llc0NyZWF0ZWAgZm9yIHVzYWdlIG5hdGl2ZSBgQXJyYXkjc2xpY2VgIHdoZXJlIGl0J3MgcG9zc2libGVcbiAgICB2YXIgQ29uc3RydWN0b3IsIHJlc3VsdCwgbjtcbiAgICBpZiAoaXNBcnJheShPKSkge1xuICAgICAgQ29uc3RydWN0b3IgPSBPLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICAgIGlmICh0eXBlb2YgQ29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IGlzQXJyYXkoQ29uc3RydWN0b3IucHJvdG90eXBlKSkpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KENvbnN0cnVjdG9yKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yW1NQRUNJRVNdO1xuICAgICAgICBpZiAoQ29uc3RydWN0b3IgPT09IG51bGwpIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTbGljZS5jYWxsKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQ29uc3RydWN0b3IpKG1heChmaW4gLSBrLCAwKSk7XG4gICAgZm9yIChuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGlmIChrIGluIE8pIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcgPSBGdW5jdGlvblByb3RvdHlwZS50b1N0cmluZztcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gRnVuY3Rpb24gaW5zdGFuY2VzIGAubmFtZWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIShOQU1FIGluIEZ1bmN0aW9uUHJvdG90eXBlKSkge1xuICBkZWZpbmVQcm9wZXJ0eShGdW5jdGlvblByb3RvdHlwZSwgTkFNRSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nLmNhbGwodGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBmbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcblxudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciBuYXRpdmVUb1N0cmluZyA9IFJlZ0V4cFByb3RvdHlwZVtUT19TVFJJTkddO1xuXG52YXIgTk9UX0dFTkVSSUMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVUb1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBuYXRpdmVUb1N0cmluZy5uYW1lICE9IFRPX1NUUklORztcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKE5PVF9HRU5FUklDIHx8IElOQ09SUkVDVF9OQU1FKSB7XG4gIHJlZGVmaW5lKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgcCA9IFN0cmluZyhSLnNvdXJjZSk7XG4gICAgdmFyIHJmID0gUi5mbGFncztcbiAgICB2YXIgZiA9IFN0cmluZyhyZiA9PT0gdW5kZWZpbmVkICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgJiYgISgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZSkgPyBmbGFncy5jYWxsKFIpIDogcmYpO1xuICAgIHJldHVybiAnLycgKyBwICsgJy8nICsgZjtcbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICB9XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVApIHtcbiAgdmFyIHN0b3JlID0gbmV3IFdlYWtNYXAoKTtcbiAgdmFyIHdtZ2V0ID0gc3RvcmUuZ2V0O1xuICB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG4gIHZhciB3bXNldCA9IHN0b3JlLnNldDtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIHdtc2V0LmNhbGwoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgY2FjaGUgPSB7fTtcblxudmFyIHRocm93ZXIgPSBmdW5jdGlvbiAoaXQpIHsgdGhyb3cgaXQ7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBvcHRpb25zKSB7XG4gIGlmIChoYXMoY2FjaGUsIE1FVEhPRF9OQU1FKSkgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXTtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHZhciBBQ0NFU1NPUlMgPSBoYXMob3B0aW9ucywgJ0FDQ0VTU09SUycpID8gb3B0aW9ucy5BQ0NFU1NPUlMgOiBmYWxzZTtcbiAgdmFyIGFyZ3VtZW50MCA9IGhhcyhvcHRpb25zLCAwKSA/IG9wdGlvbnNbMF0gOiB0aHJvd2VyO1xuICB2YXIgYXJndW1lbnQxID0gaGFzKG9wdGlvbnMsIDEpID8gb3B0aW9uc1sxXSA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4gY2FjaGVbTUVUSE9EX05BTUVdID0gISFtZXRob2QgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoQUNDRVNTT1JTICYmICFERVNDUklQVE9SUykgcmV0dXJuIHRydWU7XG4gICAgdmFyIE8gPSB7IGxlbmd0aDogLTEgfTtcblxuICAgIGlmIChBQ0NFU1NPUlMpIGRlZmluZVByb3BlcnR5KE8sIDEsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiB0aHJvd2VyIH0pO1xuICAgIGVsc2UgT1sxXSA9IDE7XG5cbiAgICBtZXRob2QuY2FsbChPLCBhcmd1bWVudDAsIGFyZ3VtZW50MSk7XG4gIH0pO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShpdCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxuJCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IC8uLy5leGVjICE9PSBleGVjIH0sIHtcbiAgZXhlYzogZXhlY1xufSk7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2FycmF5XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBmb3JFYWNoLCBtYXAsIGZpbHRlciwgc29tZSwgZXZlcnksIGZpbmQsIGZpbmRJbmRleCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0LCBzcGVjaWZpY0NyZWF0ZSkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiB0YXJnZXQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gIGZpbmQ6IGNyZWF0ZU1ldGhvZCg1KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKGtleSk7XG4gIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiAnMy42LjUnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjAgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBOYXRpdmVQcm9taXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3IgPSBOYXRpdmVQcm9taXNlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyICRmZXRjaCA9IGdldEJ1aWx0SW4oJ2ZldGNoJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xudmFyIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5O1xudmFyIElTX05PREUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuO1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IGluc3BlY3RTb3VyY2UoUHJvbWlzZUNvbnN0cnVjdG9yKSAhPT0gU3RyaW5nKFByb21pc2VDb25zdHJ1Y3Rvcik7XG4gIGlmICghR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSkge1xuICAgIC8vIFY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAvLyBXZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgIGlmIChWOF9WRVJTSU9OID09PSA2NikgcmV0dXJuIHRydWU7XG4gICAgLy8gVW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIGlmICghSVNfTk9ERSAmJiB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ICE9ICdmdW5jdGlvbicpIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIFdlIG5lZWQgUHJvbWlzZSNmaW5hbGx5IGluIHRoZSBwdXJlIHZlcnNpb24gZm9yIHByZXZlbnRpbmcgcHJvdG90eXBlIHBvbGx1dGlvblxuICBpZiAoSVNfUFVSRSAmJiAhUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZVsnZmluYWxseSddKSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgY2FuJ3QgdXNlIEBAc3BlY2llcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbiAgaWYgKFY4X1ZFUlNJT04gPj0gNTEgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KFByb21pc2VDb25zdHJ1Y3RvcikpIHJldHVybiBmYWxzZTtcbiAgLy8gRGV0ZWN0IGNvcnJlY3RuZXNzIG9mIHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlQ29uc3RydWN0b3IucmVzb2x2ZSgxKTtcbiAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICBleGVjKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgfTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IEZha2VQcm9taXNlO1xuICByZXR1cm4gIShwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlKTtcbn0pO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9IEZPUkNFRCB8fCAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBQcm9taXNlQ29uc3RydWN0b3IuYWxsKGl0ZXJhYmxlKVsnY2F0Y2gnXShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCBpc1JlamVjdCkge1xuICBpZiAoc3RhdGUubm90aWZpZWQpIHJldHVybjtcbiAgc3RhdGUubm90aWZpZWQgPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBzdGF0ZS5yZWFjdGlvbnM7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gICAgdmFyIG9rID0gc3RhdGUuc3RhdGUgPT0gRlVMRklMTEVEO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IGNoYWluW2luZGV4KytdO1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUucmVqZWN0aW9uID09PSBVTkhBTkRMRUQpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgICAgICAgICAgIHN0YXRlLnJlamVjdGlvbiA9IEhBTkRMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIGNhbiB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhdGUucmVhY3Rpb25zID0gW107XG4gICAgc3RhdGUubm90aWZpZWQgPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXN0YXRlLnJlamVjdGlvbikgb25VbmhhbmRsZWQocHJvbWlzZSwgc3RhdGUpO1xuICB9KTtcbn07XG5cbnZhciBkaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gKG5hbWUsIHByb21pc2UsIHJlYXNvbikge1xuICB2YXIgZXZlbnQsIGhhbmRsZXI7XG4gIGlmIChESVNQQVRDSF9FVkVOVCkge1xuICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZlbnQucHJvbWlzZSA9IHByb21pc2U7XG4gICAgZXZlbnQucmVhc29uID0gcmVhc29uO1xuICAgIGV2ZW50LmluaXRFdmVudChuYW1lLCBmYWxzZSwgdHJ1ZSk7XG4gICAgZ2xvYmFsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9IGVsc2UgZXZlbnQgPSB7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcmVhc29uIH07XG4gIGlmIChoYW5kbGVyID0gZ2xvYmFsWydvbicgKyBuYW1lXSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoSVNfTk9ERSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoUkVKRUNUSU9OX0hBTkRMRUQsIHByb21pc2UsIHN0YXRlLnZhbHVlKTtcbiAgfSk7XG59O1xuXG52YXIgYmluZCA9IGZ1bmN0aW9uIChmbiwgcHJvbWlzZSwgc3RhdGUsIHVud3JhcCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgZm4ocHJvbWlzZSwgc3RhdGUsIHZhbHVlLCB1bndyYXApO1xuICB9O1xufTtcblxudmFyIGludGVybmFsUmVqZWN0ID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgc3RhdGUuc3RhdGUgPSBSRUpFQ1RFRDtcbiAgbm90aWZ5KHByb21pc2UsIHN0YXRlLCB0cnVlKTtcbn07XG5cbnZhciBpbnRlcm5hbFJlc29sdmUgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlc29sdmUsIHByb21pc2UsIHdyYXBwZXIsIHN0YXRlKSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZWplY3QsIHByb21pc2UsIHdyYXBwZXIsIHN0YXRlKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgd3JhcHBlciwgZXJyb3IsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICBzdGF0ZS5zdGF0ZSA9IEZVTEZJTExFRDtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbnRlcm5hbFJlamVjdChwcm9taXNlLCB7IGRvbmU6IGZhbHNlIH0sIGVycm9yLCBzdGF0ZSk7XG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoRk9SQ0VEKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gIFByb21pc2VDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCB0aGlzLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHRoaXMsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHRoaXMsIHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICB0eXBlOiBQUk9NSVNFLFxuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICBub3RpZmllZDogZmFsc2UsXG4gICAgICBwYXJlbnQ6IGZhbHNlLFxuICAgICAgcmVhY3Rpb25zOiBbXSxcbiAgICAgIHJlamVjdGlvbjogZmFsc2UsXG4gICAgICBzdGF0ZTogUEVORElORyxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZSwge1xuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS50aGVuYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IElTX05PREUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHN0YXRlLnBhcmVudCA9IHRydWU7XG4gICAgICBzdGF0ZS5yZWFjdGlvbnMucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAoc3RhdGUuc3RhdGUgIT0gUEVORElORykgbm90aWZ5KHRoaXMsIHN0YXRlLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS5jYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShwcm9taXNlKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCBzdGF0ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCBzdGF0ZSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiB0eXBlb2YgTmF0aXZlUHJvbWlzZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgbmF0aXZlVGhlbiA9IE5hdGl2ZVByb21pc2UucHJvdG90eXBlLnRoZW47XG5cbiAgICAvLyB3cmFwIG5hdGl2ZSBQcm9taXNlI3RoZW4gZm9yIG5hdGl2ZSBhc3luYyBmdW5jdGlvbnNcbiAgICByZWRlZmluZShOYXRpdmVQcm9taXNlLnByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIG5hdGl2ZVRoZW4uY2FsbCh0aGF0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY0MFxuICAgIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xuXG4gICAgLy8gd3JhcCBmZXRjaCByZXN1bHRcbiAgICBpZiAodHlwZW9mICRmZXRjaCA9PSAnZnVuY3Rpb24nKSAkKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShQcm9taXNlQ29uc3RydWN0b3IsICRmZXRjaC5hcHBseShnbG9iYWwsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuXG5Qcm9taXNlV3JhcHBlciA9IGdldEJ1aWx0SW4oUFJPTUlTRSk7XG5cbi8vIHN0YXRpY3NcbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZWplY3RcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgY2FwYWJpbGl0eS5yZWplY3QuY2FsbCh1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVzb2x2ZVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoSVNfUFVSRSAmJiB0aGlzID09PSBQcm9taXNlV3JhcHBlciA/IFByb21pc2VDb25zdHJ1Y3RvciA6IHRoaXMsIHgpO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgLy8gYFByb21pc2UuYWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbGxcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIGBQcm9taXNlLnJhY2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbnRlZ2VyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdICsgbWF0Y2hbMV07XG59IGVsc2UgaWYgKHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbiAmJiArdmVyc2lvbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9yZWdleHAtZmxhZ3MnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWSB8fCBzdGlja3lIZWxwZXJzLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQgfHwgVU5TVVBQT1JURURfWTtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG4gICAgdmFyIHN0aWNreSA9IFVOU1VQUE9SVEVEX1kgJiYgcmUuc3RpY2t5O1xuICAgIHZhciBmbGFncyA9IHJlZ2V4cEZsYWdzLmNhbGwocmUpO1xuICAgIHZhciBzb3VyY2UgPSByZS5zb3VyY2U7XG4gICAgdmFyIGNoYXJzQWRkZWQgPSAwO1xuICAgIHZhciBzdHJDb3B5ID0gc3RyO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgZmxhZ3MgPSBmbGFncy5yZXBsYWNlKCd5JywgJycpO1xuICAgICAgaWYgKGZsYWdzLmluZGV4T2YoJ2cnKSA9PT0gLTEpIHtcbiAgICAgICAgZmxhZ3MgKz0gJ2cnO1xuICAgICAgfVxuXG4gICAgICBzdHJDb3B5ID0gU3RyaW5nKHN0cikuc2xpY2UocmUubGFzdEluZGV4KTtcbiAgICAgIC8vIFN1cHBvcnQgYW5jaG9yZWQgc3RpY2t5IGJlaGF2aW9yLlxuICAgICAgaWYgKHJlLmxhc3RJbmRleCA+IDAgJiYgKCFyZS5tdWx0aWxpbmUgfHwgcmUubXVsdGlsaW5lICYmIHN0cltyZS5sYXN0SW5kZXggLSAxXSAhPT0gJ1xcbicpKSB7XG4gICAgICAgIHNvdXJjZSA9ICcoPzogJyArIHNvdXJjZSArICcpJztcbiAgICAgICAgc3RyQ29weSA9ICcgJyArIHN0ckNvcHk7XG4gICAgICAgIGNoYXJzQWRkZWQrKztcbiAgICAgIH1cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBzdHIgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14oPzonICsgc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgfVxuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHN0aWNreSA/IHJlQ29weSA6IHJlLCBzdHJDb3B5KTtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBtYXRjaC5pbnB1dCA9IG1hdGNoLmlucHV0LnNsaWNlKGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaC5pbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgICAgcmUubGFzdEluZGV4ICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIH0gZWxzZSByZS5sYXN0SW5kZXggPSAwO1xuICAgIH0gZWxzZSBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZS5sYXN0SW5kZXggPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoTUFUQ0gsIG5hdGl2ZU1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIG1hdGNoZXIgPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBtYXRjaGVyICE9PSB1bmRlZmluZWQgPyBtYXRjaGVyLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG5cbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG5cbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0ICovXG4gICAgYWN0aXZlWERvY3VtZW50ID0gZG9jdW1lbnQuZG9tYWluICYmIG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSBhY3RpdmVYRG9jdW1lbnQgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKTtcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsLG5vLXRocm93LWxpdGVyYWxcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHRocm93IDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnbWFwJyk7XG4vLyBGRjQ5LSBpc3N1ZVxudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ21hcCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfHwgIVVTRVNfVE9fTEVOR1RIIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmU7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmICFTeW1ib2wuc2hhbVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXMoaGlkZGVuS2V5cywga2V5KSAmJiBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHZhciByZXR1cm5NZXRob2QgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldHVybk1ldGhvZCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXR1cm5NZXRob2QuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG5cbnZhciBsb2NhdGlvbiA9IGdsb2JhbC5sb2NhdGlvbjtcbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG5cbnZhciBydW5uZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBydW4oaWQpO1xuICB9O1xufTtcblxudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bihldmVudC5kYXRhKTtcbn07XG5cbnZhciBwb3N0ID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIG9sZCBlbmdpbmVzIGhhdmUgbm90IGxvY2F0aW9uLm9yaWdpblxuICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdCk7XG59O1xuXG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldCB8fCAhY2xlYXIpIHtcbiAgc2V0ID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2socnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIC8vIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjI0XG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwgJiYgIUlTX0lPUykge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiZcbiAgICB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJlxuICAgICFmYWlscyhwb3N0KSAmJlxuICAgIGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonXG4gICkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gLyhpcGhvbmV8aXBvZHxpcGFkKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn07XG5cbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhcyhTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdmb3JFYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxubW9kdWxlLmV4cG9ydHMgPSAoIVNUUklDVF9NRVRIT0QgfHwgIVVTRVNfVE9fTEVOR1RIKSA/IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0gOiBbXS5mb3JFYWNoO1xuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBuYXRpdmVKb2luID0gW10uam9pbjtcblxudmFyIEVTM19TVFJJTkdTID0gSW5kZXhlZE9iamVjdCAhPSBPYmplY3Q7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2pvaW4nLCAnLCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmpvaW5cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEVTM19TVFJJTkdTIHx8ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gbmF0aXZlSm9pbi5jYWxsKHRvSW5kZXhlZE9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG5pZiAoSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCFJU19QVVJFICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCc7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKHRpbWVvdXRFcnJvck1lc3NhZ2UsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5JywgJ3BhcmFtcyddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd0aW1lb3V0TWVzc2FnZScsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdkZWNvbXByZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICdtYXhCb2R5TGVuZ3RoJywgJ21heFJlZGlyZWN0cycsICd0cmFuc3BvcnQnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJywgJ3Jlc3BvbnNlRW5jb2RpbmcnXG4gIF07XG4gIHZhciBkaXJlY3RNZXJnZUtleXMgPSBbJ3ZhbGlkYXRlU3RhdHVzJ107XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGlyZWN0TWVyZ2VLZXlzLCBmdW5jdGlvbiBtZXJnZShwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpXG4gICAgLmNvbmNhdChkaXJlY3RNZXJnZUtleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcxKVxuICAgIC5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCAnICsgKG5hbWUgPyBuYW1lICsgJyAnIDogJycpICsgJ2ludm9jYXRpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxudmFyIGl0ZXJhdGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZm4sIHRoYXQsIEFTX0VOVFJJRVMsIElTX0lURVJBVE9SKSB7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChmbiwgdGhhdCwgQVNfRU5UUklFUyA/IDIgOiAxKTtcbiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcblxuICBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlO1xuICB9IGVsc2Uge1xuICAgIGl0ZXJGbiA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgaXRlcmFibGUnKTtcbiAgICAvLyBvcHRpbWlzYXRpb24gZm9yIGFycmF5IGl0ZXJhdG9yc1xuICAgIGlmIChpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlckZuKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IEFTX0VOVFJJRVNcbiAgICAgICAgICA/IGJvdW5kRnVuY3Rpb24oYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pXG4gICAgICAgICAgOiBib3VuZEZ1bmN0aW9uKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpO1xuICB9XG5cbiAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gIHdoaWxlICghKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgcmVzdWx0ID0gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgYm91bmRGdW5jdGlvbiwgc3RlcC52YWx1ZSwgQVNfRU5UUklFUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuXG5pdGVyYXRlLnN0b3AgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIHJlc3VsdCk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgSVNfTk9ERSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKElTX05PREUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoTXV0YXRpb25PYnNlcnZlciAmJiAhSVNfSU9TKSB7XG4gICAgdG9nZ2xlID0gdHJ1ZTtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICB0aGVuID0gcHJvbWlzZS50aGVuO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZW4uY2FsbChwcm9taXNlLCBmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdWV1ZU1pY3JvdGFzayB8fCBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICBpZiAoIWhlYWQpIHtcbiAgICBoZWFkID0gdGFzaztcbiAgICBub3RpZnkoKTtcbiAgfSBsYXN0ID0gdGFzaztcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICB2YXIgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9mYWlscycpO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvcixcbi8vIHNvIHdlIHVzZSBhbiBpbnRlcm1lZGlhdGUgZnVuY3Rpb24uXG5mdW5jdGlvbiBSRShzLCBmKSB7XG4gIHJldHVybiBSZWdFeHAocywgZik7XG59XG5cbmV4cG9ydHMuVU5TVVBQT1JURURfWSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbiAgdmFyIHJlID0gUkUoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9IG51bGw7XG59KTtcblxuZXhwb3J0cy5CUk9LRU5fQ0FSRVQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc3MzY4N1xuICB2YXIgcmUgPSBSRSgnXnInLCAnZ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ3N0cicpICE9IG51bGw7XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbi8vIElFIDw9IDExIHJlcGxhY2VzICQwIHdpdGggdGhlIHdob2xlIG1hdGNoLCBhcyBpZiBpdCB3YXMgJCZcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYwMjQ2NjYvZ2V0dGluZy1pZS10by1yZXBsYWNlLWEtcmVnZXgtd2l0aC10aGUtbGl0ZXJhbC1zdHJpbmctMFxudmFyIFJFUExBQ0VfS0VFUFNfJDAgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ2EnLnJlcGxhY2UoLy4vLCAnJDAnKSA9PT0gJyQwJztcbn0pKCk7XG5cbnZhciBSRVBMQUNFID0gd2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG4vLyBTYWZhcmkgPD0gMTMuMC4zKD8pIHN1YnN0aXR1dGVzIG50aCBjYXB0dXJlIHdoZXJlIG4+bSB3aXRoIGFuIGVtcHR5IHN0cmluZ1xudmFyIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKC8uL1tSRVBMQUNFXSkge1xuICAgIHJldHVybiAvLi9bUkVQTEFDRV0oJ2EnLCAnJDAnKSA9PT0gJyc7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSkoKTtcblxuLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4vLyBXZWV4IEpTIGhhcyBmcm96ZW4gYnVpbHQtaW4gcHJvdG90eXBlcywgc28gdXNlIHRyeSAvIGNhdGNoIHdyYXBwZXJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMsIHNoYW0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhKFxuICAgICAgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgJiZcbiAgICAgIFJFUExBQ0VfS0VFUFNfJDAgJiZcbiAgICAgICFSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRVxuICAgICkpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSwge1xuICAgICAgUkVQTEFDRV9LRUVQU18kMDogUkVQTEFDRV9LRUVQU18kMCxcbiAgICAgIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFOiBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRVxuICAgIH0pO1xuICAgIHZhciBzdHJpbmdNZXRob2QgPSBtZXRob2RzWzBdO1xuICAgIHZhciByZWdleE1ldGhvZCA9IG1ldGhvZHNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmluZ01ldGhvZCk7XG4gICAgcmVkZWZpbmUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByZWdleE1ldGhvZC5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cblxuICBpZiAoc2hhbSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cC5wcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG5cbi8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGNoYXJBdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL2NsYXNzb2YtcmF3Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vcmVnZXhwLWV4ZWMnKTtcblxuLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuXG4gIHJldHVybiByZWdleHBFeGVjLmNhbGwoUiwgUyk7XG59O1xuXG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XSdcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyByZWR1Y2UsIHJlZHVjZVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfUklHSFQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhcmd1bWVudHNMZW5ndGgsIG1lbW8pIHtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBJU19SSUdIVCA/IGxlbmd0aCAtIDEgOiAwO1xuICAgIHZhciBpID0gSVNfUklHSFQgPyAtMSA6IDE7XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA8IDIpIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGlmIChJU19SSUdIVCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICg7SVNfUklHSFQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiAgbGVmdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VyaWdodFxuICByaWdodDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQsIHZhbHVlO1xuICBpZiAobWFwcGluZykgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gbmV3IEMoKTtcbiAgICBmb3IgKDshKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldDtcbiAgICBzZXR0ZXIuY2FsbCh0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSAmJiBpdCAhPT0gbnVsbCkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhpdCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykudmFsdWVzO1xuXG4vLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKE8pIHtcbiAgICByZXR1cm4gJHZhbHVlcyhPKTtcbiAgfVxufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKS5mO1xuXG4vLyBgT2JqZWN0LnsgZW50cmllcywgdmFsdWVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVE9fRU5UUklFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBrZXkgPSBrZXlzW2krK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoTywga2V5KSkge1xuICAgICAgICByZXN1bHQucHVzaChUT19FTlRSSUVTID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiAgZW50cmllczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC52YWx1ZXNcbiAgdmFsdWVzOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsImNvbnN0IERpdiA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIGxldCBzdHJQcm9wcyA9ICcnO1xuICBmb3IgKGxldCBrZXkgaW4gcHJvcHMpIHtcbiAgICBzdHJQcm9wcyArPSBgJHtrZXl9PVwiJHtwcm9wc1trZXldfVwiIGA7XG4gIH1cbiAgcmV0dXJuIGBcbiAgICA8ZGl2ICR7c3RyUHJvcHN9PlxuICAgICAgJHtjaGlsZHJlbi5yZWR1Y2UoKGFjYywgY2hpbGQpID0+IChhY2MgKz0gY2hpbGQpLCBgYCl9XG4gICAgPC9kaXY+XG4gIGA7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEaXY7XG4iLCJjb25zdCBIMSA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIGxldCBzdHJQcm9wcyA9ICcnO1xuICBmb3IgKGxldCBrZXkgaW4gcHJvcHMpIHtcbiAgICBzdHJQcm9wcyArPSBgJHtrZXl9PVwiJHtwcm9wc1trZXldfVwiIGA7XG4gIH1cbiAgcmV0dXJuIGBcbiAgICA8aDEgJHtzdHJQcm9wc30+XG4gICAgICAke2NoaWxkcmVuLnJlZHVjZSgoYWNjLCBjaGlsZCkgPT4gKGFjYyArPSBjaGlsZCksIGBgKX1cbiAgICA8L2gxPlxuICBgO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSDE7XG4iLCJjb25zdCBCdXR0b24gPSAoY2hpbGRyZW4gPSBbXSwgcHJvcHMgPSB7fSkgPT4ge1xuICBsZXQgc3RyUHJvcHMgPSAnJztcbiAgZm9yIChsZXQga2V5IGluIHByb3BzKSB7XG4gICAgc3RyUHJvcHMgKz0gYCR7a2V5fT1cIiR7cHJvcHNba2V5XX1cIiBgO1xuICB9XG4gIHJldHVybiBgXG4gICAgPGJ1dHRvbiAke3N0clByb3BzfT5cbiAgICAgICR7Y2hpbGRyZW4ucmVkdWNlKChhY2MsIGNoaWxkKSA9PiAoYWNjICs9IGNoaWxkKSwgYGApfVxuICAgIDwvYnV0dG9uPlxuICBgO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uO1xuIiwiY29uc3QgRm9ybSA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIGxldCBzdHJQcm9wcyA9ICcnO1xuICBmb3IgKGxldCBrZXkgaW4gcHJvcHMpIHtcbiAgICBzdHJQcm9wcyArPSBgJHtrZXl9PVwiJHtwcm9wc1trZXldfVwiIGA7XG4gIH1cbiAgcmV0dXJuIGBcbiAgICA8Zm9ybSAke3N0clByb3BzfT5cbiAgICAgICR7Y2hpbGRyZW4ucmVkdWNlKChhY2MsIGNoaWxkKSA9PiAoYWNjICs9IGNoaWxkKSwgYGApfVxuICAgIDwvZm9ybT5cbiAgYDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm07XG4iLCJjb25zdCBMYWJlbCA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIGxldCBzdHJQcm9wcyA9ICcnO1xuICBmb3IgKGxldCBrZXkgaW4gcHJvcHMpIHtcbiAgICBzdHJQcm9wcyArPSBgJHtrZXl9PVwiJHtwcm9wc1trZXldfVwiIGA7XG4gIH1cbiAgcmV0dXJuIGBcbiAgICA8bGFiZWwgJHtzdHJQcm9wc30+XG4gICAgICAke2NoaWxkcmVuLnJlZHVjZSgoYWNjLCBjaGlsZCkgPT4gKGFjYyArPSBjaGlsZCksIGBgKX1cbiAgICA8L2xhYmVsPlxuICBgO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTGFiZWw7XG4iLCJjb25zdCBJbnB1dCA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIGxldCBzdHJQcm9wcyA9ICcnO1xuICBmb3IgKGxldCBrZXkgaW4gcHJvcHMpIHtcbiAgICBzdHJQcm9wcyArPSBgJHtrZXl9PVwiJHtwcm9wc1trZXldfVwiIGA7XG4gIH1cbiAgcmV0dXJuIGBcbiAgICA8aW5wdXQgJHtzdHJQcm9wc30+XG4gICAgICAke2NoaWxkcmVuLnJlZHVjZSgoYWNjLCBjaGlsZCkgPT4gKGFjYyArPSBjaGlsZCksIGBgKX1cbiAgICA8L2lucHV0PlxuICBgO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7XG4iLCJjb25zdCBTZWxlY3QgPSAoY2hpbGRyZW4gPSBbXSwgcHJvcHMgPSB7fSkgPT4ge1xuICBsZXQgc3RyUHJvcHMgPSAnJztcbiAgZm9yIChsZXQga2V5IGluIHByb3BzKSB7XG4gICAgc3RyUHJvcHMgKz0gYCR7a2V5fT1cIiR7cHJvcHNba2V5XX1cIiBgO1xuICB9XG4gIHJldHVybiBgXG4gICAgPHNlbGVjdCAke3N0clByb3BzfT5cbiAgICAgICR7Y2hpbGRyZW4ucmVkdWNlKChhY2MsIGNoaWxkKSA9PiAoYWNjICs9IGNoaWxkKSwgYGApfVxuICAgIDwvc2VsZWN0PlxuICBgO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0O1xuIiwiY29uc3QgT3B0aW9uID0gKGNoaWxkcmVuID0gW10sIHByb3BzID0ge30pID0+IHtcbiAgbGV0IHN0clByb3BzID0gJyc7XG4gIGZvciAobGV0IGtleSBpbiBwcm9wcykge1xuICAgIGtleSA9PT0gJ3NlbGVjdGVkJyA/IChzdHJQcm9wcyArPSAnc2VsZWN0ZWQnKSA6IChzdHJQcm9wcyArPSBgJHtrZXl9PVwiJHtwcm9wc1trZXldfVwiIGApO1xuICB9XG4gIHJldHVybiBgXG4gICAgPG9wdGlvbiAke3N0clByb3BzfT5cbiAgICAgICR7Y2hpbGRyZW4ucmVkdWNlKChhY2MsIGNoaWxkKSA9PiAoYWNjICs9IGNoaWxkKSwgYGApfVxuICAgIDwvb3B0aW9uPlxuICBgO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgT3B0aW9uO1xuIiwiY29uc3QgU3ZnID0gKGNoaWxkcmVuID0gW10sIHByb3BzID0ge30pID0+IHtcbiAgbGV0IHN0clByb3BzID0gJyc7XG4gIGZvciAobGV0IGtleSBpbiBwcm9wcykge1xuICAgIHN0clByb3BzICs9IGAke2tleX09XCIke3Byb3BzW2tleV19XCIgYDtcbiAgfVxuICByZXR1cm4gYFxuICAgIDxzdmcgJHtzdHJQcm9wc30+XG4gICAgICAke2NoaWxkcmVuLnJlZHVjZSgoYWNjLCBjaGlsZCkgPT4gKGFjYyArPSBjaGlsZCksIGBgKX1cbiAgICA8L3N2Zz5cbiAgYDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN2ZztcbiIsImNvbnN0IEcgPSAoY2hpbGRyZW4gPSBbXSwgcHJvcHMgPSB7fSkgPT4ge1xuICBsZXQgc3RyUHJvcHMgPSAnJztcbiAgZm9yIChsZXQga2V5IGluIHByb3BzKSB7XG4gICAgc3RyUHJvcHMgKz0gYCR7a2V5fT1cIiR7cHJvcHNba2V5XX1cIiBgO1xuICB9XG4gIHJldHVybiBgXG4gICAgPGcgJHtzdHJQcm9wc30+XG4gICAgICAke2NoaWxkcmVuLnJlZHVjZSgoYWNjLCBjaGlsZCkgPT4gKGFjYyArPSBjaGlsZCksIGBgKX1cbiAgICA8L2c+XG4gIGA7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBHO1xuIiwiY29uc3QgTGluZSA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIGxldCBzdHJQcm9wcyA9ICcnO1xuICBmb3IgKGxldCBrZXkgaW4gcHJvcHMpIHtcbiAgICBzdHJQcm9wcyArPSBgJHtrZXl9PVwiJHtwcm9wc1trZXldfVwiIGA7XG4gIH1cbiAgcmV0dXJuIGBcbiAgICA8bGluZSAke3N0clByb3BzfT5cbiAgICAgICR7Y2hpbGRyZW4ucmVkdWNlKChhY2MsIGNoaWxkKSA9PiAoYWNjICs9IGNoaWxkKSwgYGApfVxuICAgIDwvbGluZT5cbiAgYDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExpbmU7XG4iLCJjb25zdCBUZXh0ID0gKGNoaWxkcmVuID0gW10sIHByb3BzID0ge30pID0+IHtcbiAgbGV0IHN0clByb3BzID0gJyc7XG4gIGZvciAobGV0IGtleSBpbiBwcm9wcykge1xuICAgIHN0clByb3BzICs9IGAke2tleX09XCIke3Byb3BzW2tleV19XCIgYDtcbiAgfVxuICByZXR1cm4gYFxuICAgIDx0ZXh0ICR7c3RyUHJvcHN9PlxuICAgICAgJHtjaGlsZHJlbi5yZWR1Y2UoKGFjYywgY2hpbGQpID0+IChhY2MgKz0gY2hpbGQpLCBgYCl9XG4gICAgPC90ZXh0PlxuICBgO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGV4dDtcbiIsImNvbnN0IENpcmNsZSA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIGxldCBzdHJQcm9wcyA9ICcnO1xuICBmb3IgKGxldCBrZXkgaW4gcHJvcHMpIHtcbiAgICBzdHJQcm9wcyArPSBgJHtrZXl9PVwiJHtwcm9wc1trZXldfVwiIGA7XG4gIH1cbiAgcmV0dXJuIGBcbiAgICA8Y2lyY2xlICR7c3RyUHJvcHN9PlxuICAgICAgJHtjaGlsZHJlbi5yZWR1Y2UoKGFjYywgY2hpbGQpID0+IChhY2MgKz0gY2hpbGQpLCBgYCl9XG4gICAgPC9jaXJjbGU+XG4gIGA7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDaXJjbGU7XG4iLCJjb25zdCBJbWcgPSAoY2hpbGRyZW4gPSBbXSwgcHJvcHMgPSB7fSkgPT4ge1xuICBsZXQgc3RyUHJvcHMgPSAnJztcbiAgZm9yIChsZXQga2V5IGluIHByb3BzKSB7XG4gICAgc3RyUHJvcHMgKz0gYCR7a2V5fT1cIiR7cHJvcHNba2V5XX1cIiBgO1xuICB9XG4gIHJldHVybiBgXG4gICAgPGltZyAke3N0clByb3BzfT5cbiAgICAgICR7Y2hpbGRyZW4ucmVkdWNlKChhY2MsIGNoaWxkKSA9PiAoYWNjICs9IGNoaWxkKSwgYGApfVxuICAgIDwvaW1nPlxuICBgO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSW1nO1xuIiwiaW1wb3J0IHsgRGl2IH0gZnJvbSAndGFncyc7XG5cbmV4cG9ydCBjb25zdCBTaWdub3V0ID0gKGNoaWxkcmVuID0gW10sIHByb3BzID0ge30pID0+IHtcbiAgLy8g7L+g7YKkIOyytO2BrO2VtOyEnCDsl4bsnLzrqbQg66Gc6re47J247Jy866GcIOudvOyasO2MhVxuICBjb25zdCBjb29raWVWYWx1ZSA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaCgnKF58OykgP2F1dGhvcml6YXRpb249KFteO10qKSg7fCQpJyk7XG4gIGlmIChjb29raWVWYWx1ZSkge1xuICAgIHJldHVybiAoXG4gICAgICBjb29raWVWYWx1ZVsyXSAmJlxuICAgICAgRGl2KGNoaWxkcmVuLCB7XG4gICAgICAgIC4uLnByb3BzLFxuICAgICAgICBjbGFzczogYHNpZ25vdXQgJHtwcm9wcy5jbGFzcyAmJiBwcm9wcy5jbGFzc31gLFxuICAgICAgICBzdHlsZTogYCR7U3R5bGV9ICR7cHJvcHMuc3R5bGUgJiYgcHJvcHMuc3R5bGV9YCxcbiAgICAgIH0pXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbmNvbnN0IFN0eWxlID0gYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiAwO1xuICBtYXJnaW4tcmlnaHQ6IDJyZW07XG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xuYDtcbiIsImltcG9ydCB7IERpdiwgSDEgfSBmcm9tICd0YWdzJztcbmltcG9ydCB7IFNpZ25vdXQgfSBmcm9tICcuL1NpZ25vdXQnO1xuXG5leHBvcnQgY29uc3QgSGVhZGVyID0gKGNoaWxkcmVuID0gW10sIHByb3BzID0ge30pID0+IHtcbiAgcmV0dXJuIERpdihbSDEoY2hpbGRyZW4sIHsgY2xhc3M6ICd0aXRsZScgfSksIFNpZ25vdXQoWyfroZzqt7jslYTsm4MnXSldLCB7XG4gICAgLi4ucHJvcHMsXG4gICAgY2xhc3M6IGBoZWFkZXIgJHtwcm9wcy5jbGFzcyAmJiBwcm9wcy5jbGFzc31gLFxuICAgIHN0eWxlOiBgJHtTdHlsZX0gJHtwcm9wcy5zdHlsZSAmJiBwcm9wcy5zdHlsZX1gLFxuICB9KTtcbn07XG5cbmNvbnN0IFN0eWxlID0gYFxuICBkaXNwbGF5OiBmbGV4O1xuICBwb3NpdGlvbjogc3RpY2t5O1xuICBiYWNrZ3JvdW5kOiAjMzZjZmM5O1xuICB0b3A6IDA7XG4gIG1pbi13aWR0aDogMTAwJTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGNvbG9yOiAjZmZmO1xuICBib3JkZXItYm90dG9tOiBzb2xpZCAycHggI2U4ZThlODtcbiAgYm94LXNoYWRvdzogMCAwIDNyZW0gI2YzZjFmMTtcbmA7XG4iLCJpbXBvcnQgeyBIZWFkZXIgfSBmcm9tICcuL0hlYWRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRlcjtcbiIsImltcG9ydCB7IERpdiB9IGZyb20gJ3RhZ3MnO1xuaW1wb3J0IHsgSGVhZGVyLCBNb250aE5hdiwgTmF2aWdhdG9yLCBOYXZCdXR0b24gfSBmcm9tICdjb21wb25lbnRzJztcblxuZXhwb3J0IGNvbnN0IExheW91dCA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIC8vIOy/oO2CpCDssrTtgaztlbTshJwg7JeG7Jy866m0IOuhnOq3uOyduOycvOuhnCDrnbzsmrDtjIVcbiAgY29uc3QgY29va2llVmFsdWUgPSBkb2N1bWVudC5jb29raWUubWF0Y2goJyhefDspID9hdXRob3JpemF0aW9uPShbXjtdKikoO3wkKScpO1xuICBpZiAoY29va2llVmFsdWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgY29va2llVmFsdWVbMl0gJiZcbiAgICAgIERpdihcbiAgICAgICAgW1xuICAgICAgICAgIEhlYWRlcihbJ+uLpOydtOyWtO2EsCddKSxcbiAgICAgICAgICBNb250aE5hdigpLFxuICAgICAgICAgIE5hdmlnYXRvcihbXG4gICAgICAgICAgICBOYXZCdXR0b24oWyfrgrTsl60nXSwgeyBpZDogJ21haW4nLCBjbGFzczogJ3NlbGVjdGVkLXBhZ2UnIH0pLFxuICAgICAgICAgICAgTmF2QnV0dG9uKFsn64us66ClJ10sIHsgaWQ6ICdjYWxlbmRhcicgfSksXG4gICAgICAgICAgICBOYXZCdXR0b24oWyfthrXqs4QnXSwgeyBpZDogJ2dyYXBoJyB9KSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBEaXYoY2hpbGRyZW4sIHsgY2xhc3M6ICdjb250ZW50JyB9KSxcbiAgICAgICAgXSxcbiAgICAgICAge1xuICAgICAgICAgIC4uLnByb3BzLFxuICAgICAgICAgIGNsYXNzOiBgYXBwICR7cHJvcHMuY2xhc3MgJiYgcHJvcHMuY2xhc3N9YCxcbiAgICAgICAgICBzdHlsZTogYCR7U3R5bGV9ICR7cHJvcHMuc3R5bGUgJiYgcHJvcHMuc3R5bGV9YCxcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIERpdihcbiAgICAgIFtcbiAgICAgICAgSGVhZGVyKFsn64uk7J207Ja07YSwJ10pLFxuICAgICAgICBEaXYoY2hpbGRyZW4sIHtcbiAgICAgICAgICBjbGFzczogJ2NvbnRlbnQnLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgICB7XG4gICAgICAgIC4uLnByb3BzLFxuICAgICAgICBjbGFzczogYGFwcCAke3Byb3BzLmNsYXNzICYmIHByb3BzLmNsYXNzfWAsXG4gICAgICAgIHN0eWxlOiBgJHtTdHlsZX0gJHtwcm9wcy5zdHlsZSAmJiBwcm9wcy5zdHlsZX1gLFxuICAgICAgfVxuICAgICk7XG4gIH1cbn07XG5cbmNvbnN0IFN0eWxlID0gYFxuYDtcbiIsImltcG9ydCB7IExheW91dCB9IGZyb20gJy4vTGF5b3V0JztcblxuZXhwb3J0IGRlZmF1bHQgTGF5b3V0O1xuIiwiaW1wb3J0IHsgRGl2IH0gZnJvbSAndGFncyc7XG5cbmV4cG9ydCBjb25zdCBDYWxlbmRhckRheSA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIHJldHVybiBEaXYoY2hpbGRyZW4sIHtcbiAgICAuLi5wcm9wcyxcbiAgICBjbGFzczogYGNhbGVuZGFyLWRheSAke3Byb3BzLmNsYXNzICYmIHByb3BzLmNsYXNzfWAsXG4gICAgc3R5bGU6IGAke1N0eWxlfSAke3Byb3BzLnN0eWxlICYmIHByb3BzLnN0eWxlfWAsXG4gIH0pO1xufTtcblxuY29uc3QgU3R5bGUgPSBgXG4gIHdpZHRoOiA4cmVtO1xuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuYDtcbiIsImltcG9ydCB7IERpdiB9IGZyb20gJ3RhZ3MnO1xuaW1wb3J0IHsgQ2FsZW5kYXJEYXkgfSBmcm9tICcuL0NhbGVuZGFyRGF5JztcblxuZXhwb3J0IGNvbnN0IENhbGVuZGFyRGF5cyA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIGNvbnN0IGRheXMgPSBbJ+ydvCcsICfsm5QnLCAn7ZmUJywgJ+yImCcsICfrqqknLCAn6riIJywgJ+2GoCddO1xuICByZXR1cm4gRGl2KFtkYXlzLm1hcCgoZGF5KSA9PiBDYWxlbmRhckRheShbZGF5XSkpLmpvaW4oJycpXSwge1xuICAgIC4uLnByb3BzLFxuICAgIGNsYXNzOiBgY2FsZW5kYXItZGF5cyAke3Byb3BzLmNsYXNzICYmIHByb3BzLmNsYXNzfWAsXG4gICAgc3R5bGU6IGAke1N0eWxlfSAke3Byb3BzLnN0eWxlICYmIHByb3BzLnN0eWxlfWAsXG4gIH0pO1xufTtcblxuY29uc3QgU3R5bGUgPSBgXG4gIGRpc3BsYXk6IGZsZXg7XG5gO1xuIiwiaW1wb3J0IHsgRGl2IH0gZnJvbSAndGFncyc7XG5pbXBvcnQgeyBDYWxlbmRhckRheXMgfSBmcm9tICcuL0NhbGVuZGFyRGF5cyc7XG5cbmV4cG9ydCBjb25zdCBDYWxlbmRhckJvZHkgPSAoY2hpbGRyZW4gPSBbXSwgcHJvcHMgPSB7fSkgPT4ge1xuICByZXR1cm4gRGl2KFxuICAgIFtcbiAgICAgIERpdihbQ2FsZW5kYXJEYXlzKCksIERpdihbLi4uY2hpbGRyZW5dLCB7IGNsYXNzOiAnY2FsZW5kYXItZGF0ZXMnIH0pXSwge1xuICAgICAgICBjbGFzczogJ2NhbGVuZGFyLWJvZHknLFxuICAgICAgfSksXG4gICAgXSxcbiAgICB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIGNsYXNzOiBgY2FsZW5kYXItYm9keSAke3Byb3BzLmNsYXNzICYmIHByb3BzLmNsYXNzfWAsXG4gICAgICBzdHlsZTogYCR7U3R5bGV9ICR7cHJvcHMuc3R5bGUgJiYgcHJvcHMuc3R5bGV9YCxcbiAgICB9XG4gICk7XG59O1xuXG5jb25zdCBTdHlsZSA9IGBcbiAgZGlzcGxheTogZmxleDtcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XG4gIG1hcmdpbjogYXV0bztcbmA7XG4iLCJpbXBvcnQgeyBEaXYgfSBmcm9tICd0YWdzJztcblxuZXhwb3J0IGNvbnN0IENhbGVuZGFyV2VlayA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIHJldHVybiBEaXYoY2hpbGRyZW4sIHtcbiAgICAuLi5wcm9wcyxcbiAgICBjbGFzczogYGNhbGVuZGFyLXdlZWsgJHtwcm9wcy5jbGFzcyAmJiBwcm9wcy5jbGFzc31gLFxuICAgIHN0eWxlOiBgJHtTdHlsZX0gJHtwcm9wcy5zdHlsZSAmJiBwcm9wcy5zdHlsZX1gLFxuICB9KTtcbn07XG5cbmNvbnN0IFN0eWxlID0gYFxuICBkaXNwbGF5OiBmbGV4O1xuYDtcbiIsImltcG9ydCB7IERpdiB9IGZyb20gJ3RhZ3MnO1xuXG5leHBvcnQgY29uc3QgQ2FsZW5kYXJEYXRlID0gKGNoaWxkcmVuID0gW10sIHByb3BzID0ge30pID0+IHtcbiAgcmV0dXJuIERpdihjaGlsZHJlbiwge1xuICAgIC4uLnByb3BzLFxuICAgIGNsYXNzOiBgY2FsZW5kYXItZGF0ZSAke3Byb3BzLmNsYXNzICYmIHByb3BzLmNsYXNzfWAsXG4gICAgc3R5bGU6IGAke1N0eWxlfSAke3Byb3BzLnN0eWxlICYmIHByb3BzLnN0eWxlfWAsXG4gIH0pO1xufTtcblxuY29uc3QgU3R5bGUgPSBgXG4gIHdpZHRoOiA4cmVtO1xuICBoZWlnaHQ6IDhyZW07XG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuYDtcbiIsImNvbnN0IHN0b3JlID0ge307XG5cbmNvbnN0IHNldEV2ZW50ID0gKGtleSwgZXZlbnRIYW5kbGVyKSA9PiB7XG4gIC8vIOuTseuhneuQnCDtgqTsl5Ag7J2067Kk7Yq466W8IOuTseuhne2VtOykgOuLpC5cbiAgLy8g642w7J207YSw6rCAIOuwlOuAjOqzoCDrgpjshJwg7Iuk7ZaJ7ZWY6rOgIOyLtuydgCDsnbTrsqTtirjrpbwg65Ox66Gd7ZWY66m0IOuQoCDqsoMg6rCZ64ukLlxuICBzdG9yZVtrZXldID0geyAuLi5zdG9yZVtrZXldLCBldmVudEhhbmRsZXIgfTtcbn07XG5cbmNvbnN0IGdldFN0YXRlID0gKGtleSkgPT4ge1xuICAvLyBzdG9yZeyXkCDrk7HroZ3tlZwg7YKk7J2YIOuNsOydtO2EsOulvCDrpqzthLTsi5zsvJzspIDri6QuXG4gIHJldHVybiBzdG9yZVtrZXldLmRhdGE7XG59O1xuXG5jb25zdCBzZXRTdGF0ZSA9IChrZXksIGRhdGEpID0+IHtcbiAgLy8gc3RvcmXsl5Ag65Ox66Gd7ZWcIO2CpOydmCDrjbDsnbTthLDrpbwg7JeF642w7J207Yq4IO2VnOuLpC5cbiAgc3RvcmVba2V5XSA9IHsgLi4uc3RvcmVba2V5XSwgZGF0YSB9O1xuICAvLyDrjbDsnbTthLDqsIAg67OA6rK965CY6rOgIOuTseuhneuQnCDsnbTrsqTtirjrpbwg7Iuk7ZaJ7ZWc64ukLlxuICBzdG9yZVtrZXldLmhhc093blByb3BlcnR5KCdldmVudEhhbmRsZXInKSAmJiBzdG9yZVtrZXldLmV2ZW50SGFuZGxlcihzdG9yZVtrZXldLmRhdGEpO1xufTtcblxuZXhwb3J0IHsgc2V0RXZlbnQsIHNldFN0YXRlLCBnZXRTdGF0ZSB9O1xuIiwiZXhwb3J0IGNvbnN0IGdldEZvcm1hdERhdGUgPSAoZGF0ZSkgPT4ge1xuICBsZXQgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTsgLy95eXl5XG4gIGxldCBtb250aCA9IDEgKyBkYXRlLmdldE1vbnRoKCk7IC8vTVxuICBtb250aCA9IG1vbnRoID49IDEwID8gbW9udGggOiAnMCcgKyBtb250aDsgLy9tb250aCDrkZDsnpDrpqzroZwg7KCA7J6lXG4gIGxldCBkYXkgPSBkYXRlLmdldERhdGUoKTsgLy9kXG4gIGRheSA9IGRheSA+PSAxMCA/IGRheSA6ICcwJyArIGRheTsgLy9kYXkg65GQ7J6Q66as66GcIOyggOyepVxuICByZXR1cm4geWVhciArICctJyArIG1vbnRoICsgJy0nICsgZGF5OyAvLyctJyDstpTqsIDtlZjsl6wgeXl5eS1tbS1kZCDtmJXtg5wg7IOd7ISxIOqwgOuKpVxufTtcbiIsIi8vIOuCtOumvOywqOyInFxuZXhwb3J0IGNvbnN0IGRhdGVEZXNjZW5kaW5nID0gKGEsIGIpID0+IHtcbiAgdmFyIGRhdGVBID0gbmV3IERhdGUoYVsnZGF0ZSddKS5nZXRUaW1lKCk7XG4gIHZhciBkYXRlQiA9IG5ldyBEYXRlKGJbJ2RhdGUnXSkuZ2V0VGltZSgpO1xuICByZXR1cm4gZGF0ZUEgPCBkYXRlQiA/IDEgOiAtMTtcbn07XG5cbi8vIOyYpOumhOywqOyInFxuZXhwb3J0IGNvbnN0IGRhdGVBc2NlbmRpbmcgPSAoYSwgYikgPT4ge1xuICB2YXIgZGF0ZUEgPSBuZXcgRGF0ZShhWydkYXRlJ10pLmdldFRpbWUoKTtcbiAgdmFyIGRhdGVCID0gbmV3IERhdGUoYlsnZGF0ZSddKS5nZXRUaW1lKCk7XG4gIHJldHVybiBkYXRlQSA+IGRhdGVCID8gMSA6IC0xO1xufTtcbiIsImltcG9ydCB7IGdldFN0YXRlLCBnZXREYXRlIH0gZnJvbSAnc3RvcmUnO1xuaW1wb3J0IHsgZGF0ZURlc2NlbmRpbmcgfSBmcm9tICd1dGlscy9kYXRlLXNvcnRpbmcnO1xuXG5leHBvcnQgY29uc3QgZ2V0RGF5S2NhbCA9ICgpID0+IHtcbiAgY29uc3Qgc29ydGVkS2NhbERhdGEgPSBnZXRTdGF0ZSgna2NhbERhdGEnKVxuICAgIC5zb3J0KGRhdGVEZXNjZW5kaW5nKVxuICAgIC5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICBpZiAoYWNjLmhhc093blByb3BlcnR5KGN1ci5kYXRlKSkge1xuICAgICAgICBpZiAoY3VyLnR5cGUgPT09ICdpbnRha2UnKSB7XG4gICAgICAgICAgY29uc3Qga2NhbCA9IGFjY1tjdXIuZGF0ZV0gKyBjdXIua2NhbDtcbiAgICAgICAgICBhY2NbY3VyLmRhdGVdID0ga2NhbDtcbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGtjYWwgPSBhY2NbY3VyLmRhdGVdIC0gY3VyLmtjYWw7XG4gICAgICAgICAgYWNjW2N1ci5kYXRlXSA9IGtjYWw7XG4gICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGN1ci50eXBlID09PSAnaW50YWtlJykge1xuICAgICAgICAgIGNvbnN0IGtjYWwgPSBjdXIua2NhbDtcbiAgICAgICAgICBhY2NbY3VyLmRhdGVdID0ga2NhbDtcbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGtjYWwgPSAtY3VyLmtjYWw7XG4gICAgICAgICAgYWNjW2N1ci5kYXRlXSA9IGtjYWw7XG4gICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHt9KTtcbiAgcmV0dXJuIHNvcnRlZEtjYWxEYXRhO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIwOWMzNGRlOTUxYjZjZTY4NTA3NzYxNDVhZGViYTlmNC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNTdmYWQ5NWM3ZGZiMGQ2MmFkYmY5YTM4OTI4MzhhZjguc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjJiOGQ1MTBkNzc5NDM4MTQ2ZDE0MzEyYzJkNjExOGZmLnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIyMWQ1M2ZjOGMxZDZmMzcwZjI2ZjMzMjJmNDNhYTY3MC5zdmdcIjsiLCJpbXBvcnQgeyBEaXYsIEltZyB9IGZyb20gJ3RhZ3MnO1xuaW1wb3J0IHsgQ2FsZW5kYXJCb2R5IH0gZnJvbSAnLi9DYWxlbmRhckJvZHknO1xuaW1wb3J0IHsgQ2FsZW5kYXJXZWVrIH0gZnJvbSAnLi9DYWxlbmRhcldlZWsnO1xuaW1wb3J0IHsgQ2FsZW5kYXJEYXRlIH0gZnJvbSAnLi9DYWxlbmRhckRhdGUnO1xuaW1wb3J0IHsgZ2V0U3RhdGUsIGdldERhdGUgfSBmcm9tICdzdG9yZSc7XG5pbXBvcnQgeyBnZXRGb3JtYXREYXRlIH0gZnJvbSAndXRpbHMvZGF0ZS1mb3JtYXQnO1xuaW1wb3J0IHsgZ2V0RGF5S2NhbCB9IGZyb20gJ3V0aWxzL2tjYWwtY2FsY3VsYXRvcic7XG5pbXBvcnQgTm9ybWFsRW1vamkgZnJvbSAnaW1hZ2VzL25vcm1hbC5zdmcnO1xuaW1wb3J0IE9iZXNpdHlFbW9qaSBmcm9tICdpbWFnZXMvb2Jlc2l0eS5zdmcnO1xuaW1wb3J0IE92ZXJFbW9qaSBmcm9tICdpbWFnZXMvb3Zlci5zdmcnO1xuaW1wb3J0IFVuZGVyRW1vamkgZnJvbSAnaW1hZ2VzL3VuZGVyLnN2Zyc7XG5cbmV4cG9ydCBjb25zdCBDYWxlbmRhciA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIGNvbnN0IHllYXIgPSBnZXRTdGF0ZSgnZGF0ZScpLmdldEZ1bGxZZWFyKCk7XG4gIGNvbnN0IG1vbnRoID0gZ2V0U3RhdGUoJ2RhdGUnKS5nZXRNb250aCgpICsgMTtcbiAgcmV0dXJuIERpdihbQ2FsZW5kYXJCb2R5KFtjcmVhdGVDYWxlbmRhcih5ZWFyLCBtb250aCldKV0sIHtcbiAgICAuLi5wcm9wcyxcbiAgICBjbGFzczogYGNhbGVuZGFyICR7cHJvcHMuY2xhc3MgJiYgcHJvcHMuY2xhc3N9YCxcbiAgICBzdHlsZTogYCR7U3R5bGV9ICR7cHJvcHMuc3R5bGUgJiYgcHJvcHMuc3R5bGV9YCxcbiAgfSk7XG59O1xuXG5jb25zdCBTdHlsZSA9IGBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbjogM3JlbSBhdXRvO1xuYDtcblxuY29uc3QgY3JlYXRlQ2FsZW5kYXIgPSAoeWVhciwgbW9udGgpID0+IHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgMSk7IC8vIOuCoOynnCDshLjtjIUgKOyXsOuPhCwg7JuULCAx7J28KVxuICBjb25zdCBmaXJzdERheSA9IGRhdGUuZ2V0RGF5KCk7IC8vIO2VtOuLuSDsm5TsnZgg7LKr67KI7Ke4IOyalOydvCDrjbDsnbTthLBcbiAgY29uc3QgbGFzdERhdGUgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSArIDEsIDApLmdldERhdGUoKTsgLy8g7ZW064u5IOyblOydmCDrp4jsp4Drp4kg7J287J6QIOuNsOydtO2EsFxuICBjb25zdCBwcmV2TGFzdERhdGUgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgMCkuZ2V0RGF0ZSgpOyAvLyDsnbTsoIQg64us7J2YIOuniOyngOuniSDsnbzsnpAg642w7J207YSwXG5cbiAgbGV0IHN0YXJ0RGF5Q291bnQgPSAxO1xuICBsZXQgbGFzdERheUNvdW50ID0gMTtcblxuICBjb25zdCB3ZWVrTGlzdCA9IFtdO1xuXG4gIGNvbnN0IGVuX2RheXMgPSBbJ3N1bicsICdtb24nLCAndHVlJywgJ3dlZCcsICd0aHUnLCAnZnJpJywgJ3NhdCddO1xuXG4gIGNvbnN0IGRheUtjYWxEYXRhID0gZ2V0RGF5S2NhbCgpO1xuXG4gIC8vIDXspIQg67CY67O1XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgY29uc3QgZGF5TGlzdCA9IFtdO1xuICAgIC8vIDHso7zsnbwg64uo7JyEIOuNsOydtO2EsCDsg53shLFcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDc7IGorKykge1xuICAgICAgLy8gaSA9PSAwOiAx7KO87LCoXG4gICAgICAvLyBqIDwgZmlyc3REYXk6IO2VtOuLuSDsm5Qg7Iuc7J6RIOyalOydvCDsnbTsoIQg7J28IOuVjFxuICAgICAgaWYgKGkgPT09IDAgJiYgaiA8IGZpcnN0RGF5KSB7XG4gICAgICAgIGNvbnN0IGlkID0gZ2V0Rm9ybWF0RGF0ZShcbiAgICAgICAgICBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSAtIDEsIHByZXZMYXN0RGF0ZSAtIChmaXJzdERheSAtIDEpICsgailcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgRW1vamkgPSBkYXlLY2FsRGF0YVtpZF0gPyBnZXRFbW9qaShkYXlLY2FsRGF0YVtpZF0pIDogJyc7XG5cbiAgICAgICAgZGF5TGlzdC5wdXNoKFxuICAgICAgICAgIC8vIOydtOyghOuLrCDrp4jsp4Drp4kg7J287J6QIC0gKO2VtOuLuSDsm5TsnZgg7Iuc7J6RIOyalOydvCAtIDEpICsg7Lm07Jq07Yq4XG4gICAgICAgICAgQ2FsZW5kYXJEYXRlKFtgJHtwcmV2TGFzdERhdGUgLSAoZmlyc3REYXkgLSAxKSArIGp9YCwgRW1vamldLCB7XG4gICAgICAgICAgICBjbGFzczogYHBhc3QgJHtlbl9kYXlzW2pdfWAsXG4gICAgICAgICAgICBpZDogZ2V0Rm9ybWF0RGF0ZShcbiAgICAgICAgICAgICAgbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkgLSAxLCBwcmV2TGFzdERhdGUgLSAoZmlyc3REYXkgLSAxKSArIGopXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3R5bGU6ICdjb2xvcjogZ3JheScsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgLy8g7ZW064u5IOyblCDsnbzsnpBcbiAgICAgIH0gZWxzZSBpZiAoaSA+PSAwICYmIHN0YXJ0RGF5Q291bnQgPD0gbGFzdERhdGUpIHtcbiAgICAgICAgY29uc3QgaWQgPSBnZXRGb3JtYXREYXRlKG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgc3RhcnREYXlDb3VudCkpO1xuICAgICAgICBjb25zdCBFbW9qaSA9IGRheUtjYWxEYXRhW2lkXSA/IGdldEVtb2ppKGRheUtjYWxEYXRhW2lkXSkgOiAnJztcbiAgICAgICAgZGF5TGlzdC5wdXNoKFxuICAgICAgICAgIENhbGVuZGFyRGF0ZShbYCR7c3RhcnREYXlDb3VudH1gLCBFbW9qaV0sIHtcbiAgICAgICAgICAgIGNsYXNzOiBgJHtlbl9kYXlzW2pdfWAsXG4gICAgICAgICAgICBpZDogZ2V0Rm9ybWF0RGF0ZShuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIHN0YXJ0RGF5Q291bnQpKSxcbiAgICAgICAgICAgIHN0eWxlOiBgY29sb3I6ICR7KGVuX2RheXNbal0gPT09ICdzdW4nICYmICdyZWQnKSB8fCAoZW5fZGF5c1tqXSA9PT0gJ3NhdCcgJiYgJ2JsdWUnKX1gLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIHN0YXJ0RGF5Q291bnQgKz0gMTtcbiAgICAgICAgLy8g64uk7J2MIOuLrCDsnbzsnpBcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnREYXlDb3VudCA+IGxhc3REYXRlKSB7XG4gICAgICAgIGNvbnN0IGlkID0gZ2V0Rm9ybWF0RGF0ZShuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSArIDEsIGxhc3REYXlDb3VudCkpO1xuICAgICAgICBjb25zdCBFbW9qaSA9IGRheUtjYWxEYXRhW2lkXSA/IGdldEVtb2ppKGRheUtjYWxEYXRhW2lkXSkgOiAnJztcbiAgICAgICAgZGF5TGlzdC5wdXNoKFxuICAgICAgICAgIENhbGVuZGFyRGF0ZShbYCR7bGFzdERheUNvdW50fWAsIEVtb2ppXSwge1xuICAgICAgICAgICAgY2xhc3M6IGBmdXR1cmUgJHtlbl9kYXlzW2pdfWAsXG4gICAgICAgICAgICBpZDogZ2V0Rm9ybWF0RGF0ZShuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSArIDEsIGxhc3REYXlDb3VudCkpLFxuICAgICAgICAgICAgc3R5bGU6ICdjb2xvcjogZ3JheScsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgbGFzdERheUNvdW50ICs9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIHdlZWtMaXN0LnB1c2goZGF5TGlzdC5qb2luKCcnKSk7XG4gIH1cbiAgcmV0dXJuIHdlZWtMaXN0Lm1hcCgod2VlaykgPT4gQ2FsZW5kYXJXZWVrKFt3ZWVrXSkpLmpvaW4oJycpO1xufTtcblxuY29uc3QgZ2V0RW1vamkgPSAoa2NhbCkgPT4ge1xuICBpZiAoa2NhbCA+PSAzNTAwKVxuICAgIHJldHVybiBEaXYoW0ltZyhbXSwgeyBzcmM6IE9iZXNpdHlFbW9qaSwgc3R5bGU6IEVtb2ppU3R5bGUgfSldLCB7IHN0eWxlOiBFbW9qaUNvbnRhaW5lclN0eWxlIH0pO1xuICBpZiAoa2NhbCA+IDI1MDApXG4gICAgcmV0dXJuIERpdihbSW1nKFtdLCB7IHNyYzogT3ZlckVtb2ppLCBzdHlsZTogRW1vamlTdHlsZSB9KV0sIHsgc3R5bGU6IEVtb2ppQ29udGFpbmVyU3R5bGUgfSk7XG4gIGlmIChrY2FsID4gMjAwMClcbiAgICByZXR1cm4gRGl2KFtJbWcoW10sIHsgc3JjOiBOb3JtYWxFbW9qaSwgc3R5bGU6IEVtb2ppU3R5bGUgfSldLCB7IHN0eWxlOiBFbW9qaUNvbnRhaW5lclN0eWxlIH0pO1xuICByZXR1cm4gRGl2KFtJbWcoW10sIHsgc3JjOiBVbmRlckVtb2ppLCBzdHlsZTogRW1vamlTdHlsZSB9KV0sIHsgc3R5bGU6IEVtb2ppQ29udGFpbmVyU3R5bGUgfSk7XG59O1xuXG5jb25zdCBFbW9qaVN0eWxlID0gYFxuICB3aWR0aDogODAlO1xuYDtcblxuY29uc3QgRW1vamlDb250YWluZXJTdHlsZSA9IGBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5gO1xuIiwiaW1wb3J0IHsgQ2FsZW5kYXIgfSBmcm9tICcuL0NhbGVuZGFyJztcblxuZXhwb3J0IGRlZmF1bHQgQ2FsZW5kYXI7XG4iLCJpbXBvcnQgeyBEaXYsIEJ1dHRvbiB9IGZyb20gJ3RhZ3MnO1xuaW1wb3J0IHsgZ2V0U3RhdGUgfSBmcm9tICdzdG9yZSc7XG5cbmV4cG9ydCBjb25zdCBNb250aE5hdiA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIGNvbnN0IHllYXIgPSBnZXRTdGF0ZSgnZGF0ZScpLmdldEZ1bGxZZWFyKCk7XG4gIGNvbnN0IG1vbnRoID0gZ2V0U3RhdGUoJ2RhdGUnKS5nZXRNb250aCgpICsgMTtcbiAgcmV0dXJuIERpdihcbiAgICBbXG4gICAgICBCdXR0b24oWyc8J10sIHtcbiAgICAgICAgaWQ6ICdwcmV2LWJ0bicsXG4gICAgICAgIGNsYXNzOiAnbW9udGgtbmF2LWJ0bicsXG4gICAgICAgIHN0eWxlOiBgYmFja2dyb3VuZDogbm9uZTsgYm9yZGVyOiBub25lOyBmb250LXNpemU6IDJyZW07IG91dGxpbmU6IG5vbmU7YCxcbiAgICAgICAgb25tb3VzZW92ZXI6IFwidGhpcy5zdHlsZS5jb2xvcj0nI2ZhNTQxYydcIixcbiAgICAgICAgb25tb3VzZW91dDogXCJ0aGlzLnN0eWxlLmNvbG9yPSdibGFjaydcIixcbiAgICAgIH0pLFxuICAgICAgRGl2KFtgJHt5ZWFyfeuFhCAke21vbnRofeyblGBdLCB7XG4gICAgICAgIGNsYXNzOiAnY3VycmVudC15ZWFyLW1vbnRoJyxcbiAgICAgICAgc3R5bGU6ICdtYXJnaW46IDAgM3JlbTsgZm9udC1zaXplOiAxLjVyZW07IGZvbnQtd2VpZ2h0OiA2MDA7IGxpbmUtaGVpZ2h0OiAyOycsXG4gICAgICB9KSxcbiAgICAgIEJ1dHRvbihbJz4nXSwge1xuICAgICAgICBpZDogJ25leHQtYnRuJyxcbiAgICAgICAgY2xhc3M6ICdtb250aC1uYXYtYnRuJyxcbiAgICAgICAgc3R5bGU6IGBiYWNrZ3JvdW5kOiBub25lOyBib3JkZXI6IG5vbmU7IGZvbnQtc2l6ZTogMnJlbTsgb3V0bGluZTogbm9uZTtgLFxuICAgICAgICBvbm1vdXNlb3ZlcjogXCJ0aGlzLnN0eWxlLmNvbG9yPScjZmE1NDFjJ1wiLFxuICAgICAgICBvbm1vdXNlb3V0OiBcInRoaXMuc3R5bGUuY29sb3I9J2JsYWNrJ1wiLFxuICAgICAgfSksXG4gICAgXSxcbiAgICB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIGNsYXNzOiBgbW9udGgtbmF2ICR7cHJvcHMuY2xhc3MgJiYgcHJvcHMuY2xhc3N9YCxcbiAgICAgIHN0eWxlOiBgJHtTdHlsZX0gJHtwcm9wcy5zdHlsZSAmJiBwcm9wcy5zdHlsZX1gLFxuICAgIH1cbiAgKTtcbn07XG5cbmNvbnN0IFN0eWxlID0gYFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgbWFyZ2luOiAycmVtIDA7XG5gO1xuIiwiaW1wb3J0IHsgTW9udGhOYXYgfSBmcm9tICcuL01vbnRoTmF2JztcblxuZXhwb3J0IGRlZmF1bHQgTW9udGhOYXY7XG4iLCJpbXBvcnQgeyBCdXR0b24gfSBmcm9tICd0YWdzJztcblxuZXhwb3J0IGNvbnN0IE5hdkJ1dHRvbiA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIHJldHVybiBCdXR0b24oY2hpbGRyZW4sIHtcbiAgICAuLi5wcm9wcyxcbiAgICBjbGFzczogYG5hdi1idG4gJHtwcm9wcy5jbGFzcyAmJiBwcm9wcy5jbGFzc31gLFxuICAgIHN0eWxlOiBgJHtTdHlsZX0gJHtcbiAgICAgIHByb3BzLmNsYXNzICYmIHByb3BzLmNsYXNzID09PSAnc2VsZWN0ZWQtcGFnZScgPyBTZWxlY3RlZFN0eWxlIDogVW5zZWxlY3RlZFN0eWxlXG4gICAgfSAke3Byb3BzLnN0eWxlICYmIHByb3BzLnN0eWxlfWAsXG4gIH0pO1xufTtcblxuY29uc3QgU3R5bGUgPSBgXG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB3aWR0aDogMjAlO1xuICBib3JkZXI6IDNweCBzb2xpZCAjMzZjZmM5O1xuICBvdXRsaW5lOiBub25lO1xuICBwYWRkaW5nOiA1cHg7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgYm9yZGVyLXJhZGl1czogMXJlbTtcbmA7XG5cbmNvbnN0IFVuc2VsZWN0ZWRTdHlsZSA9IGBcbiAgYmFja2dyb3VuZDogIzM2Y2ZjOTtcbiAgY29sb3I6ICNmZmY7XG5gO1xuXG5jb25zdCBTZWxlY3RlZFN0eWxlID0gYFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xuICBjb2xvcjogIzM2Y2ZjOTtcbmA7XG4iLCJpbXBvcnQgeyBEaXYgfSBmcm9tICd0YWdzJztcbmltcG9ydCB7IE5hdkJ1dHRvbiB9IGZyb20gJy4vTmF2QnV0dG9uJztcblxuZXhwb3J0IGNvbnN0IE5hdmlnYXRvciA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIHJldHVybiBEaXYoY2hpbGRyZW4sIHtcbiAgICAuLi5wcm9wcyxcbiAgICBjbGFzczogYG5hdmlnYXRvciAke3Byb3BzLmNsYXNzICYmIHByb3BzLmNsYXNzfWAsXG4gICAgc3R5bGU6IGAke1N0eWxlfSAke3Byb3BzLnN0eWxlICYmIHByb3BzLnN0eWxlfWAsXG4gIH0pO1xufTtcblxuY29uc3QgU3R5bGUgPSBgXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2lkdGg6IDUwJTtcbiAgbWFyZ2luOiBhdXRvO1xuYDtcbiIsImltcG9ydCB7IE5hdmlnYXRvciB9IGZyb20gJy4vTmF2aWdhdG9yJztcbmltcG9ydCB7IE5hdkJ1dHRvbiBhcyBfTmF2QnV0dG9uIH0gZnJvbSAnLi9OYXZCdXR0b24nO1xuXG5leHBvcnQgY29uc3QgTmF2QnV0dG9uID0gX05hdkJ1dHRvbjtcblxuZXhwb3J0IGRlZmF1bHQgTmF2aWdhdG9yO1xuIiwiaW1wb3J0IHsgRGl2LCBMYWJlbCB9IGZyb20gJ3RhZ3MnO1xuXG5leHBvcnQgY29uc3QgRm9ybUl0ZW0gPSAoY2hpbGRyZW4gPSBbXSwgcHJvcHMgPSB7fSkgPT4ge1xuICByZXR1cm4gRGl2KFxuICAgIFtcbiAgICAgIExhYmVsKFtjaGlsZHJlbi5zaGlmdCgwKV0sIHtcbiAgICAgICAgc3R5bGU6ICdtaW4td2lkdGg6IDE4JTsgZGlzcGxheTogaW5saW5lLWJsb2NrOyBmb250LXdlaWdodDogNjAwOycsXG4gICAgICB9KSxcbiAgICAgIC4uLmNoaWxkcmVuLFxuICAgIF0sXG4gICAge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICBjbGFzczogYGZvcm0taXRlbSAke3Byb3BzLmNsYXNzICYmIHByb3BzLmNsYXNzfWAsXG4gICAgICBzdHlsZTogYCR7U3R5bGV9ICR7cHJvcHMuc3R5bGUgJiYgcHJvcHMuc3R5bGV9YCxcbiAgICB9XG4gICk7XG59O1xuXG5jb25zdCBTdHlsZSA9IGBcbiAgd2lkdGg6IDUwJTtcbiAgbWFyZ2luOiAuNXJlbSAwO1xuYDtcbiIsImltcG9ydCB7IEZvcm1JdGVtIH0gZnJvbSAnLi9Gb3JtSXRlbSc7XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1JdGVtO1xuIiwiaW1wb3J0IHsgRm9ybSwgQnV0dG9uLCBJbnB1dCwgU2VsZWN0LCBPcHRpb24gfSBmcm9tICd0YWdzJztcbmltcG9ydCB7IEZvcm1JdGVtLCBSb3cgfSBmcm9tICdjb21wb25lbnRzJztcbmltcG9ydCB7IGdldEZvcm1hdERhdGUgfSBmcm9tICd1dGlscy9kYXRlLWZvcm1hdCc7XG5cbmV4cG9ydCBjb25zdCBSZWdpc3RlckZvcm0gPSAoY2hpbGRyZW4gPSBbXSwgcHJvcHMgPSB7fSkgPT4ge1xuICByZXR1cm4gRm9ybShcbiAgICBbXG4gICAgICBGb3JtSXRlbShbXG4gICAgICAgICfrtoTrpZgnLFxuICAgICAgICBCdXR0b24oWyfshK3st6gnXSwge1xuICAgICAgICAgIHN0eWxlOiBCdXR0b25TdHlsZSArIGlzU2VsZWN0ZWRTdHlsZSxcbiAgICAgICAgICBjbGFzczogJ3R5cGUtYnRuIGludGFrZS1idG4gaXNTZWxlY3RlZCcsXG4gICAgICAgICAgaWQ6ICdpbnRha2UnLFxuICAgICAgICB9KSxcbiAgICAgICAgQnV0dG9uKFsn7IaM67mEJ10sIHtcbiAgICAgICAgICBzdHlsZTogQnV0dG9uU3R5bGUgKyB1blNlbGVjdGVkU3R5bGUsXG4gICAgICAgICAgY2xhc3M6ICd0eXBlLWJ0biBjb25zdW1wdGlvbi1idG4nLFxuICAgICAgICAgIGlkOiAnY29uc3VtcHRpb24nLFxuICAgICAgICB9KSxcbiAgICAgIF0pLFxuICAgICAgUm93KFtcbiAgICAgICAgRm9ybUl0ZW0oW1xuICAgICAgICAgICfrgqDsp5wnLFxuICAgICAgICAgIElucHV0KFtdLCB7XG4gICAgICAgICAgICB0eXBlOiAnZGF0ZScsXG4gICAgICAgICAgICB2YWx1ZTogZ2V0Rm9ybWF0RGF0ZShuZXcgRGF0ZSgpKSxcbiAgICAgICAgICAgIGNsYXNzOiAnZGF0ZS1waWNrZXInLFxuICAgICAgICAgICAgc3R5bGU6IElucHV0U3R5bGUsXG4gICAgICAgICAgfSksXG4gICAgICAgIF0pLFxuICAgICAgICBGb3JtSXRlbShbXG4gICAgICAgICAgJ+y5tO2FjOqzoOumrCcsXG4gICAgICAgICAgU2VsZWN0KFtPcHRpb24oWyftlZzsi50nXSksIE9wdGlvbihbJ+ykkeyLnSddLCB7IHNlbGVjdGVkOiB0cnVlIH0pLCBPcHRpb24oWyfsnbzsi50nXSldLCB7XG4gICAgICAgICAgICBzdHlsZTogSW5wdXRTdHlsZSxcbiAgICAgICAgICAgIGNsYXNzOiAnY2F0ZWdvcnknLFxuICAgICAgICAgIH0pLFxuICAgICAgICBdKSxcbiAgICAgIF0pLFxuICAgICAgUm93KFtcbiAgICAgICAgRm9ybUl0ZW0oW1xuICAgICAgICAgICfsubzroZzrpqwnLFxuICAgICAgICAgIElucHV0KFtdLCB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+y5vOuhnOumrOulvCDsnoXroKXtlbTso7zshLjsmpQuJyxcbiAgICAgICAgICAgIHN0eWxlOiBJbnB1dFN0eWxlLFxuICAgICAgICAgICAgY2xhc3M6ICdpbnB1dC1rY2FsJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSksXG4gICAgICAgIEZvcm1JdGVtKFtcbiAgICAgICAgICAn64K07JqpJyxcbiAgICAgICAgICBJbnB1dChbXSwge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICfrgrTsmqnsnYQg7J6F66Cl7ZW07KO87IS47JqULicsXG4gICAgICAgICAgICBzdHlsZTogSW5wdXRTdHlsZSxcbiAgICAgICAgICAgIGNsYXNzOiAnaW5wdXQtY29udGVudCcsXG4gICAgICAgICAgfSksXG4gICAgICAgIF0pLFxuICAgICAgXSksXG4gICAgICBCdXR0b24oWyfrk7HroZ0nXSwgeyBzdHlsZTogU3VibWl0QnV0dG9uU3R5bGUsIGNsYXNzOiAnc3VibWl0LWJ0bicgfSksXG4gICAgXSxcbiAgICB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIGNsYXNzOiBgZm9ybSAke3Byb3BzLmNsYXNzICYmIHByb3BzLmNsYXNzfWAsXG4gICAgICBzdHlsZTogYCR7U3R5bGV9ICR7cHJvcHMuc3R5bGUgJiYgcHJvcHMuc3R5bGV9YCxcbiAgICB9XG4gICk7XG59O1xuXG5jb25zdCBTdHlsZSA9IGBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIG1hcmdpbjogMnJlbSBhdXRvO1xuICB3aWR0aDogNTAlO1xuYDtcblxuY29uc3QgSW5wdXRTdHlsZSA9IGBcbiAgd2lkdGg6NzUlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBoZWlnaHQ6IDJyZW07XG4gIHBhZGRpbmc6IDAgMTBweDtcbiAgb3V0bGluZTogbm9uZTtcbmA7XG5cbmNvbnN0IEJ1dHRvblN0eWxlID0gYFxuICBoZWlnaHQ6IDJyZW07XG4gIHdpZHRoOiA1cmVtO1xuICBvdXRsaW5lOiBub25lO1xuYDtcblxuY29uc3QgaXNTZWxlY3RlZFN0eWxlID0gYFxuICBjb2xvcjogIzM2Y2ZjOTtcbiAgYmFja2dyb3VuZDogI2ZmZjtcbiAgYm9yZGVyOiAycHggc29saWQgIzM2Y2ZjOTtcbmA7XG5cbmNvbnN0IHVuU2VsZWN0ZWRTdHlsZSA9IGBcbiAgYmFja2dyb3VuZDogIzM2Y2ZjOTtcbiAgY29sb3I6ICNmZmY7XG4gIGJvcmRlcjogMnB4IHNvbGlkICMzNmNmYzk7XG5gO1xuXG5jb25zdCBTdWJtaXRCdXR0b25TdHlsZSA9IGBcbiAgaGVpZ2h0OiAycmVtO1xuICBiYWNrZ3JvdW5kOiAjMzZjZmM5O1xuICBjb2xvcjogI2ZmZjtcbiAgYm9yZGVyOiAycHggc29saWQgIzM2Y2ZjOTtcbiAgb3V0bGluZTogbm9uZTtcbmA7XG4iLCJpbXBvcnQgeyBSZWdpc3RlckZvcm0gfSBmcm9tICcuL1JlZ2lzdGVyRm9ybSc7XG5cbmV4cG9ydCBkZWZhdWx0IFJlZ2lzdGVyRm9ybTtcbiIsImltcG9ydCB7IERpdiB9IGZyb20gJ3RhZ3MnO1xuXG5leHBvcnQgY29uc3QgUm93ID0gKGNoaWxkcmVuID0gW10sIHByb3BzID0ge30pID0+IHtcbiAgcmV0dXJuIERpdihjaGlsZHJlbiwge1xuICAgIC4uLnByb3BzLFxuICAgIGNsYXNzOiBgcm93ICR7cHJvcHMuY2xhc3MgJiYgcHJvcHMuY2xhc3N9YCxcbiAgICBzdHlsZTogYCR7U3R5bGV9ICR7cHJvcHMuc3R5bGUgJiYgcHJvcHMuc3R5bGV9YCxcbiAgfSk7XG59O1xuXG5jb25zdCBTdHlsZSA9IGBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuYDtcbiIsImltcG9ydCB7IFJvdyB9IGZyb20gJy4vUm93JztcblxuZXhwb3J0IGRlZmF1bHQgUm93O1xuIiwiaW1wb3J0IHsgRGl2IH0gZnJvbSAndGFncyc7XG5cbmV4cG9ydCBjb25zdCBEYXRlVGl0bGUgPSAoY2hpbGRyZW4gPSBbXSwgcHJvcHMgPSB7fSkgPT4ge1xuICByZXR1cm4gRGl2KFxuICAgIFsuLi5jaGlsZHJlbiwgRGl2KFsn7IaM67mEJ10sIHsgc3R5bGU6IFN1YlRpdGxlU3R5bGUgfSksIERpdihbJ+yErey3qCddLCB7IHN0eWxlOiBTdWJUaXRsZVN0eWxlIH0pXSxcbiAgICB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIGNsYXNzOiBgZGF0ZS10aXRsZSAke3Byb3BzLmNsYXNzICYmIHByb3BzLmNsYXNzfWAsXG4gICAgICBzdHlsZTogYCR7U3R5bGV9ICR7cHJvcHMuc3R5bGUgJiYgcHJvcHMuc3R5bGV9YCxcbiAgICB9XG4gICk7XG59O1xuXG5jb25zdCBTdHlsZSA9IGBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAzZnIgMWZyIDFmcjtcbiAgcGFkZGluZzogLjVyZW0gMXJlbTtcbiAgYmFja2dyb3VuZDogIzM2Y2ZjOTtcbiAgY29sb3I6ICNmZmY7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG5gO1xuXG5jb25zdCBTdWJUaXRsZVN0eWxlID0gYFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gO1xuIiwiaW1wb3J0IHsgRGl2IH0gZnJvbSAndGFncyc7XG5cbmV4cG9ydCBjb25zdCBDb250ZW50ID0gKGNoaWxkcmVuID0gW10sIHByb3BzID0ge30pID0+IHtcbiAgcmV0dXJuIERpdihjaGlsZHJlbiwge1xuICAgIC4uLnByb3BzLFxuICAgIGNsYXNzOiBgY29udGVudCAke3Byb3BzLmNsYXNzICYmIHByb3BzLmNsYXNzfWAsXG4gICAgc3R5bGU6IGAke1N0eWxlfSAke3Byb3BzLnN0eWxlICYmIHByb3BzLnN0eWxlfWAsXG4gIH0pO1xufTtcblxuY29uc3QgU3R5bGUgPSBgXG4gIG1hcmdpbjogcmlnaHQ6IGF1dG87XG5gO1xuIiwiaW1wb3J0IHsgRGl2IH0gZnJvbSAndGFncyc7XG5cbmV4cG9ydCBjb25zdCBJbnRha2UgPSAoY2hpbGRyZW4gPSBbXSwgcHJvcHMgPSB7fSkgPT4ge1xuICByZXR1cm4gRGl2KFsnKycsIC4uLmNoaWxkcmVuLCAna2NhbCddLCB7XG4gICAgLi4ucHJvcHMsXG4gICAgY2xhc3M6IGBpbnRha2UgJHtwcm9wcy5jbGFzcyAmJiBwcm9wcy5jbGFzc31gLFxuICAgIHN0eWxlOiBgJHtTdHlsZX0gJHtwcm9wcy5zdHlsZSAmJiBwcm9wcy5zdHlsZX1gLFxuICB9KTtcbn07XG5cbmNvbnN0IFN0eWxlID0gYFxuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgY29sb3I6IHJlZDtcbmA7XG4iLCJpbXBvcnQgeyBEaXYgfSBmcm9tICd0YWdzJztcblxuZXhwb3J0IGNvbnN0IENvbnN1bXB0aW9uID0gKGNoaWxkcmVuID0gW10sIHByb3BzID0ge30pID0+IHtcbiAgcmV0dXJuIERpdihbJy0nLCAuLi5jaGlsZHJlbiwgJ2tjYWwnXSwge1xuICAgIC4uLnByb3BzLFxuICAgIGNsYXNzOiBgY29uc3VtcHRpb24gJHtwcm9wcy5jbGFzcyAmJiBwcm9wcy5jbGFzc31gLFxuICAgIHN0eWxlOiBgJHtTdHlsZX0gJHtwcm9wcy5zdHlsZSAmJiBwcm9wcy5zdHlsZX1gLFxuICB9KTtcbn07XG5cbmNvbnN0IFN0eWxlID0gYFxuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgY29sb3I6IGJsdWU7XG5gO1xuIiwiaW1wb3J0IHsgRGl2IH0gZnJvbSAndGFncyc7XG5pbXBvcnQgeyBDb250ZW50IH0gZnJvbSAnLi9Db250ZW50JztcbmltcG9ydCB7IEludGFrZSB9IGZyb20gJy4vSW50YWtlJztcbmltcG9ydCB7IENvbnN1bXB0aW9uIH0gZnJvbSAnLi9Db25zdW1wdGlvbic7XG5cbmV4cG9ydCBjb25zdCBLY2FsTGlzdCA9IChjaGlsZHJlbiA9IFtdLCBwcm9wcyA9IHt9KSA9PiB7XG4gIHJldHVybiBEaXYoXG4gICAgW1xuICAgICAgQ29udGVudChbY2hpbGRyZW5bMF1dKSxcbiAgICAgIHByb3BzLnR5cGUgPT09ICdjb25zdW1wdGlvbicgPyBDb25zdW1wdGlvbihbY2hpbGRyZW5bMV1dKSA6IEludGFrZShbY2hpbGRyZW5bMV1dKSxcbiAgICBdLFxuICAgIHtcbiAgICAgIC4uLnByb3BzLFxuICAgICAgY2xhc3M6IGBrY2FsLWxpc3QgJHtwcm9wcy5jbGFzcyAmJiBwcm9wcy5jbGFzc31gLFxuICAgICAgc3R5bGU6IGAke1N0eWxlfSAke3Byb3BzLnR5cGUgPT09ICdjb25zdW1wdGlvbicgPyBDb25zdW1wdGlvblN0eWxlIDogSW50YWtlU3R5bGV9ICR7XG4gICAgICAgIHByb3BzLnN0eWxlICYmIHByb3BzLnN0eWxlXG4gICAgICB9YCxcbiAgICB9XG4gICk7XG59O1xuXG5jb25zdCBTdHlsZSA9IGBcbiAgZGlzcGxheTogZ3JpZDtcbiAgcGFkZGluZzogLjVyZW0gMXJlbTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGxpZ2h0Z3JheTtcbmA7XG5cbmNvbnN0IENvbnN1bXB0aW9uU3R5bGUgPSBgXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMmZyIDFmciAxZnI7XG5gO1xuXG5jb25zdCBJbnRha2VTdHlsZSA9IGBcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyZnIgMmZyO1xuYDtcbiIsImltcG9ydCB7IERpdiB9IGZyb20gJ3RhZ3MnO1xuaW1wb3J0IHsgRGF0ZVRpdGxlIH0gZnJvbSAnLi9EYXRlVGl0bGUnO1xuaW1wb3J0IHsgS2NhbExpc3QgfSBmcm9tICcuL0tjYWxMaXN0JztcblxuZXhwb3J0IGNvbnN0IERhdGVMaXN0ID0gKGNoaWxkcmVuID0gW10sIHByb3BzID0ge30pID0+IHtcbiAgcmV0dXJuIERpdihcbiAgICBbXG4gICAgICBEYXRlVGl0bGUoW3Byb3BzLmRhdGVdKSxcbiAgICAgIEtjYWxMaXN0KFtwcm9wcy5jb250ZW50LCBwcm9wcy5rY2FsXSwgeyB0eXBlOiBwcm9wcy50eXBlIH0pLFxuICAgICAgY2hpbGRyZW4sXG4gICAgXSxcbiAgICB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIGlkOiBwcm9wcy5kYXRlLFxuICAgICAgY2xhc3M6IGBkYXRlLWxpc3QgJHtwcm9wcy5jbGFzcyAmJiBwcm9wcy5jbGFzc31gLFxuICAgICAgc3R5bGU6IGAke1N0eWxlfSAke3Byb3BzLnN0eWxlICYmIHByb3BzLnN0eWxlfWAsXG4gICAgfVxuICApO1xufTtcblxuY29uc3QgU3R5bGUgPSBgXG4gIG1hcmdpbjogYXV0bztcbiAgd2lkdGg6IDUwJTtcbmA7XG4iLCJpbXBvcnQgeyBEYXRlTGlzdCB9IGZyb20gJy4vRGF0ZUxpc3QnO1xuaW1wb3J0IHsgS2NhbExpc3QgYXMgX0tjYWxMaXN0IH0gZnJvbSAnLi9LY2FsTGlzdCc7XG5cbmV4cG9ydCBjb25zdCBLY2FsTGlzdCA9IF9LY2FsTGlzdDtcblxuZXhwb3J0IGRlZmF1bHQgRGF0ZUxpc3Q7XG4iLCJpbXBvcnQgeyBEaXYsIFN2ZywgRywgTGluZSwgVGV4dCwgQ2lyY2xlIH0gZnJvbSAndGFncyc7XG5pbXBvcnQgeyBnZXREYXlLY2FsIH0gZnJvbSAndXRpbHMva2NhbC1jYWxjdWxhdG9yJztcblxuZXhwb3J0IGNvbnN0IEdyYXBoID0gKGNoaWxkcmVuID0gW10sIHByb3BzID0ge30pID0+IHtcbiAgY29uc3QgVmVydGljYWxUZXh0ID0gW1xuICAgIC4uLmNyZWF0ZVZlcnRpY2FsR3JhcGgoKSxcbiAgICBUZXh0KFsna2NhbCddLCB7IGNsYXNzOiAnbGFiZWwtdGl0bGUnLCB4OiAnMjUnLCB5OiAnMjAwJyB9KSxcbiAgXTtcblxuICBjb25zdCBIb3Jpem9udGFsVGV4dCA9IFtcbiAgICAuLi5jcmVhdGVIb3Jpem9udGFsR3JhcGgoKSxcbiAgICBUZXh0KFsnZGF5J10sIHsgY2xhc3M6ICdsYWJlbC10aXRsZScsIHg6ICc0MDAnLCB5OiAnNDQwJyB9KSxcbiAgXTtcblxuICBjb25zdCBHcmFwaENpcmxjZSA9IGNyZWF0ZUdyYXBoQ29udGVudCgpO1xuXG4gIHJldHVybiBEaXYoXG4gICAgW1xuICAgICAgU3ZnKFxuICAgICAgICBbXG4gICAgICAgICAgLy8g7IS466Gc7LaVXG4gICAgICAgICAgRyhbTGluZShbXSwgeyB4MTogJzkwJywgeDI6ICc5MCcsIHkxOiAnNScsIHkyOiAnMzcxJyB9KV0sIHtcbiAgICAgICAgICAgIGNsYXNzOiAnZ3JpZCB4LWdyaWQnLFxuICAgICAgICAgICAgaWQ6ICd4R3JpZCcsXG4gICAgICAgICAgICBzdHlsZTogJ3N0cm9rZTogI2NjYzsgc3Ryb2tlLWRhc2hhcnJheTogMDsgc3Ryb2tlLXdpZHRoOiAxOycsXG4gICAgICAgICAgfSksXG5cbiAgICAgICAgICAvLyDshLjroZzstpUg7YWN7Iqk7Yq4XG4gICAgICAgICAgRyhWZXJ0aWNhbFRleHQsIHtcbiAgICAgICAgICAgIGNsYXNzOiAnbGFiZWxzIHktbGFiZWxzJyxcbiAgICAgICAgICAgIHN0eWxlOlxuICAgICAgICAgICAgICAnZm9udC13ZWlnaHQ6IGJvbGQ7IGZvbnQtc2l6ZTogMTJweDsgZmlsbDogYmxhY2s7IHRleHQtYW5jaG9yOiBlbmQ7IGZvbnQtc2l6ZTogMTNweDsnLFxuICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgLy8g6rCA66Gc7LaVXG4gICAgICAgICAgRyhbTGluZShbXSwgeyB4MTogJzkwJywgeDI6ICc3MDUnLCB5MTogJzM3MCcsIHkyOiAnMzcwJyB9KV0sIHtcbiAgICAgICAgICAgIGNsYXNzOiAnZ3JpZCB5LWdyaWQnLFxuICAgICAgICAgICAgaWQ6ICd5R3JpZCcsXG4gICAgICAgICAgICBzdHlsZTogJ3N0cm9rZTogI2NjYzsgc3Ryb2tlLWRhc2hhcnJheTogMDsgc3Ryb2tlLXdpZHRoOiAxOycsXG4gICAgICAgICAgfSksXG5cbiAgICAgICAgICAvLyDqsIDroZzstpUg7YWN7Iqk7Yq4XG4gICAgICAgICAgRyhbLi4uSG9yaXpvbnRhbFRleHRdLCB7XG4gICAgICAgICAgICBjbGFzczogJ2xhYmVscyB4LWxhYmVscycsXG4gICAgICAgICAgICBzdHlsZTpcbiAgICAgICAgICAgICAgJ2ZvbnQtd2VpZ2h0OiBib2xkOyBmb250LXNpemU6IDEycHg7IGZpbGw6IGJsYWNrOyB0ZXh0LWFuY2hvcjogbWlkZGxlOyBmb250LXNpemU6IDEzcHg7JyxcbiAgICAgICAgICB9KSxcblxuICAgICAgICAgIC8vIOygkCBjeDogKOqwgOuhnOy2lSDthY3siqTtirgg7JyE7LmYIC0gNn4xMCksIGN5OiDshLjroZzstpUg7JyE7LmYIOyXreycvOuhnCDqs4TsgrAsIHI6IOuwmOyngOumhFxuICAgICAgICAgIEcoR3JhcGhDaXJsY2UsIHsgY2xhc3M6ICdkYXRhJywgc3R5bGU6ICdmaWxsOiByZWQ7IHN0cm9rZS13aWR0aDogMTsnIH0pLFxuICAgICAgICBdLFxuICAgICAgICB7IGNsYXNzOiAnZ3JhcGgnLCBzdHlsZTogJ2hlaWdodDogNTAwcHg7IHdpZHRoOiA4MDBweDsnIH1cbiAgICAgICksXG4gICAgXSxcbiAgICB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIGNsYXNzOiBgZ3JhcGgtY29udGFpbmVyICR7cHJvcHMuY2xhc3MgJiYgcHJvcHMuY2xhc3N9YCxcbiAgICAgIHN0eWxlOiBgJHtTdHlsZX0gJHtwcm9wcy5zdHlsZSAmJiBwcm9wcy5zdHlsZX1gLFxuICAgIH1cbiAgKTtcbn07XG5cbmNvbnN0IFN0eWxlID0gYFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgbWFyZ2luOiAzcmVtIGF1dG87XG5gO1xuXG5jb25zdCBjcmVhdGVWZXJ0aWNhbEdyYXBoID0gKCkgPT4ge1xuICBjb25zdCBkYXlLY2FsRGF0YSA9IGdldERheUtjYWwoKTtcbiAgY29uc3QgTUFYX1ZBTFVFID0gTWF0aC5tYXgoLi4uT2JqZWN0LnZhbHVlcyhkYXlLY2FsRGF0YSkpO1xuICBjb25zdCByZXN1bHQgPSBbVGV4dChbMF0sIHsgeDogJzgwJywgeTogJzM3MycgfSldO1xuICBmb3IgKGxldCBrZXkgaW4gZGF5S2NhbERhdGEpIHtcbiAgICByZXN1bHQucHVzaChcbiAgICAgIFRleHQoW2RheUtjYWxEYXRhW2tleV1dLCB7XG4gICAgICAgIHg6ICc4MCcsXG4gICAgICAgIHk6IFN0cmluZygxNSArIDM1OCAqICgxIC0gZGF5S2NhbERhdGFba2V5XSAvIE1BWF9WQUxVRSkpLFxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5jb25zdCBjcmVhdGVIb3Jpem9udGFsR3JhcGggPSAoKSA9PiB7XG4gIGNvbnN0IGRheUtjYWxEYXRhID0gZ2V0RGF5S2NhbCgpO1xuICBjb25zdCBkYXlMaXN0ID0gT2JqZWN0LmtleXMoZGF5S2NhbERhdGEpLm1hcCgodmFsdWUpID0+IHZhbHVlLnN1YnN0cig4LCAyKSArICfsnbwnKTtcbiAgY29uc3QgcmVzdWx0ID0gZGF5TGlzdC5tYXAoKHZhbHVlLCBpZHgpID0+IHtcbiAgICByZXR1cm4gVGV4dChbdmFsdWVdLCB7XG4gICAgICB4OiBTdHJpbmcoNjg0IC0gNTM0ICogKGlkeCAvIChkYXlMaXN0Lmxlbmd0aCAtIDEpKSksXG4gICAgICB5OiAnNDAwJyxcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5jb25zdCBjcmVhdGVHcmFwaENvbnRlbnQgPSAoKSA9PiB7XG4gIGNvbnN0IGRheUtjYWxEYXRhID0gZ2V0RGF5S2NhbCgpO1xuICBjb25zdCBNQVhfVkFMVUUgPSBNYXRoLm1heCguLi5PYmplY3QudmFsdWVzKGRheUtjYWxEYXRhKSk7XG4gIGNvbnN0IGRheUxpc3QgPSBPYmplY3Qua2V5cyhkYXlLY2FsRGF0YSk7XG4gIGNvbnN0IHJlc3VsdCA9IGRheUxpc3QubWFwKChrZXksIGlkeCkgPT4ge1xuICAgIHJldHVybiBDaXJjbGUoW10sIHtcbiAgICAgIGN4OiBTdHJpbmcoNjg0IC0gNTM0ICogKGlkeCAvIChkYXlMaXN0Lmxlbmd0aCAtIDEpKSksXG4gICAgICBjeTogU3RyaW5nKDE1ICsgMzU4ICogKDEgLSBkYXlLY2FsRGF0YVtrZXldIC8gTUFYX1ZBTFVFKSksXG4gICAgICByOiAnNCcsXG4gICAgICB2YWx1ZTogZGF5S2NhbERhdGFba2V5XSxcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IHsgR3JhcGggfSBmcm9tICcuL0dyYXBoJztcblxuZXhwb3J0IGRlZmF1bHQgR3JhcGg7XG4iLCJpbXBvcnQgeyBGb3JtLCBCdXR0b24sIElucHV0IH0gZnJvbSAndGFncyc7XG5pbXBvcnQgeyBGb3JtSXRlbSB9IGZyb20gJ2NvbXBvbmVudHMnO1xuXG5leHBvcnQgY29uc3QgTG9naW5Gb3JtID0gKGNoaWxkcmVuID0gW10sIHByb3BzID0ge30pID0+IHtcbiAgcmV0dXJuIEZvcm0oXG4gICAgW1xuICAgICAgRm9ybUl0ZW0oXG4gICAgICAgIFtcbiAgICAgICAgICAn7JWE7J2065SUJyxcbiAgICAgICAgICBJbnB1dChbXSwge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICfslYTsnbTrlJTrpbwg7J6F66Cl7ZW07KO87IS47JqULicsXG4gICAgICAgICAgICBzdHlsZTogSW5wdXRTdHlsZSxcbiAgICAgICAgICAgIGNsYXNzOiAnaW5wdXQtaWQnLFxuICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgICAgICB7IHN0eWxlOiAnd2lkdGg6IDEwMCU7JyB9XG4gICAgICApLFxuICAgICAgRm9ybUl0ZW0oXG4gICAgICAgIFtcbiAgICAgICAgICAn67mE67CA67KI7Zi4JyxcbiAgICAgICAgICBJbnB1dChbXSwge1xuICAgICAgICAgICAgdHlwZTogJ3Bhc3N3b3JkJyxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAn67mE67CA67KI7Zi466W8IOyeheugpe2VtOyjvOyEuOyalC4nLFxuICAgICAgICAgICAgc3R5bGU6IElucHV0U3R5bGUsXG4gICAgICAgICAgICBjbGFzczogJ2lucHV0LXB3JyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICAgICAgeyBzdHlsZTogJ3dpZHRoOiAxMDAlOycgfVxuICAgICAgKSxcbiAgICAgIEJ1dHRvbihbJ+uhnOq3uOyduCddLCB7IHN0eWxlOiBTdWJtaXRCdXR0b25TdHlsZSwgY2xhc3M6ICdsb2dpbi1idG4nIH0pLFxuICAgIF0sXG4gICAge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICBjbGFzczogYGZvcm0gJHtwcm9wcy5jbGFzcyAmJiBwcm9wcy5jbGFzc31gLFxuICAgICAgc3R5bGU6IGAke1N0eWxlfSAke3Byb3BzLnN0eWxlICYmIHByb3BzLnN0eWxlfWAsXG4gICAgfVxuICApO1xufTtcblxuY29uc3QgU3R5bGUgPSBgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBtYXJnaW46IDJyZW0gYXV0bztcbiAgd2lkdGg6IDMwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbmA7XG5cbmNvbnN0IElucHV0U3R5bGUgPSBgXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGhlaWdodDogMnJlbTtcbiAgcGFkZGluZzogMCAxMHB4O1xuICBvdXRsaW5lOiBub25lO1xuICB3aWR0aDogNzUlO1xuYDtcblxuY29uc3QgU3VibWl0QnV0dG9uU3R5bGUgPSBgXG4gIGhlaWdodDogMnJlbTtcbiAgYmFja2dyb3VuZDogIzM2Y2ZjOTtcbiAgY29sb3I6ICNmZmY7XG4gIGJvcmRlcjogMnB4IHNvbGlkICMzNmNmYzk7XG4gIG91dGxpbmU6IG5vbmU7XG4gIG1hcmdpbjogMnJlbSBhdXRvO1xuICB3aWR0aDogMTAwJTtcbmA7XG4iLCJpbXBvcnQgeyBMb2dpbkZvcm0gfSBmcm9tICcuL0xvZ2luRm9ybSc7XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luRm9ybTtcbiIsImltcG9ydCB7IERpdiB9IGZyb20gJ3RhZ3MnO1xuaW1wb3J0IHsgUmVnaXN0ZXJGb3JtLCBEYXRlTGlzdCwgS2NhbExpc3QgfSBmcm9tICdjb21wb25lbnRzJztcbmltcG9ydCB7IGdldFN0YXRlIH0gZnJvbSAnc3RvcmUnO1xuaW1wb3J0IHsgZGF0ZURlc2NlbmRpbmcgfSBmcm9tICd1dGlscy9kYXRlLXNvcnRpbmcnO1xuXG5jb25zdCBNYWluUGFnZSA9ICgpID0+IHtcbiAgY29uc3QgRGF0YUxpc3RzID0gY3JlYXRlRGF0ZUxpc3QoKTtcbiAgcmV0dXJuIERpdihbUmVnaXN0ZXJGb3JtKCksIERhdGFMaXN0c10sIHtcbiAgICBjbGFzczogJ21haW4tcGFnZScsXG4gIH0pO1xufTtcblxuY29uc3QgY3JlYXRlRGF0ZUxpc3QgPSAoKSA9PiB7XG4gIGNvbnN0IHNvcnRlZEtjYWxEYXRhID0gZ2V0U3RhdGUoJ2tjYWxEYXRhJylcbiAgICAuc29ydChkYXRlRGVzY2VuZGluZylcbiAgICAucmVkdWNlKChhY2MsIGN1cikgPT4ge1xuICAgICAgaWYgKGFjYy5oYXNPd25Qcm9wZXJ0eShjdXIuZGF0ZSkpIHtcbiAgICAgICAgY29uc3QgbmV3QXJyID0gWy4uLmFjY1tjdXIuZGF0ZV0sIGN1cl07XG4gICAgICAgIGFjY1tjdXIuZGF0ZV0gPSBuZXdBcnI7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBuZXdBcnIgPSBbY3VyXTtcbiAgICAgICAgYWNjW2N1ci5kYXRlXSA9IG5ld0FycjtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cbiAgICB9LCB7fSk7XG4gIGxldCByZXN1bHQgPSAnJztcbiAgZm9yIChsZXQgZGF0ZSBpbiBzb3J0ZWRLY2FsRGF0YSkge1xuICAgIGxldCBmaXJzdCA9IHNvcnRlZEtjYWxEYXRhW2RhdGVdLnNoaWZ0KCk7XG4gICAgcmVzdWx0ICs9IERhdGVMaXN0KFxuICAgICAgW1xuICAgICAgICBzb3J0ZWRLY2FsRGF0YVtkYXRlXS5yZWR1Y2UoXG4gICAgICAgICAgKGFjYywgY3VyKSA9PiBhY2MgKyBLY2FsTGlzdChbY3VyLmNvbnRlbnQsIGN1ci5rY2FsXSwgeyB0eXBlOiBjdXIudHlwZSB9KSxcbiAgICAgICAgICAnJ1xuICAgICAgICApLFxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogZmlyc3QudHlwZSxcbiAgICAgICAgY2F0ZWdvcnk6IGZpcnN0LmNhdGVnb3J5LFxuICAgICAgICBrY2FsOiBmaXJzdC5rY2FsLFxuICAgICAgICBjb250ZW50OiBmaXJzdC5jb250ZW50LFxuICAgICAgICBkYXRlOiBmaXJzdC5kYXRlLFxuICAgICAgfVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1haW5QYWdlO1xuIiwiaW1wb3J0IHsgRGl2IH0gZnJvbSAndGFncyc7XG5pbXBvcnQgeyBMb2dpbkZvcm0gfSBmcm9tICdjb21wb25lbnRzJztcblxuY29uc3QgTG9naW5QYWdlID0gKCkgPT4ge1xuICByZXR1cm4gRGl2KFtMb2dpbkZvcm0oKV0sIHtcbiAgICBjbGFzczogJ2xvZ2luLXBhZ2UnLFxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luUGFnZTtcbiIsImltcG9ydCB7IERpdiB9IGZyb20gJ3RhZ3MnO1xuaW1wb3J0IHsgQ2FsZW5kYXIgfSBmcm9tICdjb21wb25lbnRzJztcblxuY29uc3QgQ2FsZW5kYXJQYWdlID0gKCkgPT4ge1xuICByZXR1cm4gRGl2KFtDYWxlbmRhcigpXSwge1xuICAgIGNsYXNzOiAnY2FsZW5kYXItcGFnZScsXG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FsZW5kYXJQYWdlO1xuIiwiaW1wb3J0IHsgRGl2IH0gZnJvbSAndGFncyc7XG5pbXBvcnQgeyBHcmFwaCB9IGZyb20gJ2NvbXBvbmVudHMnO1xuXG5jb25zdCBHcmFwaFBhZ2UgPSAoKSA9PiB7XG4gIHJldHVybiBEaXYoW0dyYXBoKCldLCB7XG4gICAgY2xhc3M6ICdncmFwaC1wYWdlJyxcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBHcmFwaFBhZ2U7XG4iLCJleHBvcnQgY29uc3QgYmFzZVVSTCA9XG4gIGAke3Byb2Nlc3MuZW52LkFQSV9FTkRfUE9JTlR9OiR7cHJvY2Vzcy5lbnYuQVBJX0VORF9QT1JUfS9hcGlgIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpJztcbiIsImltcG9ydCB7IGJhc2VVUkwgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5leHBvcnQgZGVmYXVsdCBheGlvcy5jcmVhdGUoe1xuICBiYXNlVVJMOiBiYXNlVVJMLFxuICBoZWFkZXJzOiB7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gIHdpdGhDcmVkZW50aWFsczogdHJ1ZSxcbn0pO1xuIiwiaW1wb3J0IE1haW5QYWdlIGZyb20gJ3BhZ2VzL21haW4nO1xuaW1wb3J0IENhbGVuZGFyUGFnZSBmcm9tICdwYWdlcy9jYWxlbmRhcic7XG5pbXBvcnQgR3JhcGhQYWdlIGZyb20gJ3BhZ2VzL2dyYXBoJztcbmltcG9ydCBMb2dpblBhZ2UgZnJvbSAncGFnZXMvbG9naW4nO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAndGFncyc7XG5pbXBvcnQgeyBEYXRlTGlzdCwgS2NhbExpc3QsIExheW91dCB9IGZyb20gJ2NvbXBvbmVudHMnO1xuaW1wb3J0IHsgZ2V0U3RhdGUsIHNldFN0YXRlLCBzZXRFdmVudCB9IGZyb20gJ3N0b3JlJztcbmltcG9ydCBBUEkgZnJvbSAndXRpbHMvYXBpJztcblxuLy8g64Sk7J2067mE6rKM7J207IWYIOydtOuypO2KuCDtlbjrk6Trn6xcbmNvbnN0IG9uTmF2RXZlbnRIYW5kbGVyID0gYXN5bmMgKHBhZ2UpID0+IHtcbiAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgcGFnZSB9LCBudWxsLCBgIyR7cGFnZX1gKTtcbiAgY29uc3Qgc3RhdGVQYWdlID0gd2luZG93Lmhpc3Rvcnkuc3RhdGUucGFnZTtcbiAgY29uc3QgJGN1cnJlbnROYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VsZWN0ZWQtcGFnZScpO1xuICBjb25zdCAkbmV3TmF2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFnZSk7XG4gIGlmIChzdGF0ZVBhZ2UgPT09ICdtYWluJykge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50JykuaW5uZXJIVE1MID0gTWFpblBhZ2UoKTtcbiAgfSBlbHNlIGlmIChzdGF0ZVBhZ2UgPT09ICdjYWxlbmRhcicpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGVudCcpLmlubmVySFRNTCA9IENhbGVuZGFyUGFnZSgpO1xuICB9IGVsc2UgaWYgKHN0YXRlUGFnZSA9PT0gJ2dyYXBoJykge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50JykuaW5uZXJIVE1MID0gR3JhcGhQYWdlKCk7XG4gIH0gZWxzZSBpZiAoc3RhdGVQYWdlID09PSAnbG9naW4nKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKS5pbm5lckhUTUwgPSBMb2dpblBhZ2UoKTtcbiAgfVxuICAkY3VycmVudE5hdi5zdHlsZS5iYWNrZ3JvdW5kID0gJyMzNmNmYzknO1xuICAkY3VycmVudE5hdi5zdHlsZS5jb2xvciA9ICcjZmZmJztcbiAgJG5ld05hdi5zdHlsZS5iYWNrZ3JvdW5kID0gJyNmZmYnO1xuICAkbmV3TmF2LnN0eWxlLmNvbG9yID0gJyMzNmNmYzknO1xuICAkY3VycmVudE5hdi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZC1wYWdlJyk7XG4gICRuZXdOYXYuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQtcGFnZScpO1xufTtcblxuY29uc3Qgb25DaGFuZ2VEYXRlSGFuZGxlciA9IChwcmV2TmV4dCkgPT4ge1xuICBsZXQgbW9udGggPSBnZXRTdGF0ZSgnZGF0ZScpLmdldE1vbnRoKCk7XG4gIGxldCB5ZWFyID0gZ2V0U3RhdGUoJ2RhdGUnKS5nZXRGdWxsWWVhcigpO1xuICBpZiAocHJldk5leHQgPT09ICdwcmV2LWJ0bicpIHtcbiAgICBtb250aCAtPSAxO1xuICAgIGlmIChtb250aCA8IDApIHtcbiAgICAgIG1vbnRoID0gMTE7XG4gICAgICB5ZWFyIC09IDE7XG4gICAgfVxuICB9IGVsc2UgaWYgKHByZXZOZXh0ID09PSAnbmV4dC1idG4nKSB7XG4gICAgbW9udGggKz0gMTtcbiAgICBpZiAobW9udGggPiAxMSkge1xuICAgICAgbW9udGggPSAwO1xuICAgICAgeWVhciArPSAxO1xuICAgIH1cbiAgfVxuICBzZXRTdGF0ZSgnZGF0ZScsIG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKSk7XG59O1xuXG5jb25zdCBvblNlbGVjdFR5cGVIYW5kbGVyID0gKGNsYXNzTGlzdCkgPT4ge1xuICBjb25zdCAkaW50YWtlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmludGFrZS1idG4nKTtcbiAgY29uc3QgJGNvbnN1bXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnN1bXB0aW9uLWJ0bicpO1xuICBjb25zdCAkY2F0ZWdvcnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2F0ZWdvcnknKTtcbiAgY29uc3QgU2VsZWN0U3R5bGUgPVxuICAgICdoZWlnaHQ6IDJyZW07IHdpZHRoOiA1cmVtOyBvdXRsaW5lOiBub25lOyBjb2xvcjogIzM2Y2ZjOTsgYmFja2dyb3VuZDogI2ZmZjsgYm9yZGVyOiAycHggc29saWQgIzM2Y2ZjOTsnO1xuICBjb25zdCBVbnNlbGVjdFN0eWxlID1cbiAgICAnaGVpZ2h0OiAycmVtOyB3aWR0aDogNXJlbTsgb3V0bGluZTogbm9uZTsgYmFja2dyb3VuZDogIzM2Y2ZjOTsgY29sb3I6ICNmZmY7IGJvcmRlcjogMnB4IHNvbGlkICMzNmNmYzk7JztcbiAgaWYgKGNsYXNzTGlzdC5jb250YWlucygnaW50YWtlLWJ0bicpKSB7XG4gICAgJGludGFrZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgU2VsZWN0U3R5bGUpO1xuICAgICRjb25zdW1wdGlvbi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgVW5zZWxlY3RTdHlsZSk7XG4gICAgJGludGFrZS5jbGFzc0xpc3QudG9nZ2xlKCdpc1NlbGVjdGVkJyk7XG4gICAgJGNvbnN1bXB0aW9uLmNsYXNzTGlzdC50b2dnbGUoJ2lzU2VsZWN0ZWQnKTtcbiAgICAkY2F0ZWdvcnkuaW5uZXJIVE1MID0gT3B0aW9uKFsn7ZWc7IudJ10pICsgT3B0aW9uKFsn7KSR7IudJ10pICsgT3B0aW9uKFsn7J287IudJ10pO1xuICB9IGVsc2Uge1xuICAgICRpbnRha2Uuc2V0QXR0cmlidXRlKCdzdHlsZScsIFVuc2VsZWN0U3R5bGUpO1xuICAgICRjb25zdW1wdGlvbi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgU2VsZWN0U3R5bGUpO1xuICAgICRpbnRha2UuY2xhc3NMaXN0LnRvZ2dsZSgnaXNTZWxlY3RlZCcpO1xuICAgICRjb25zdW1wdGlvbi5jbGFzc0xpc3QudG9nZ2xlKCdpc1NlbGVjdGVkJyk7XG4gICAgJGNhdGVnb3J5LmlubmVySFRNTCA9IE9wdGlvbihbJ+ycoOyCsOyGjCDsmrTrj5knXSkgKyBPcHRpb24oWyfqt7zroKUg7Jq064+ZJ10pO1xuICB9XG59O1xuXG5jb25zdCBvblN1Ym1pdEhhbmRsZXIgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHR5cGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaXNTZWxlY3RlZCcpLmlkO1xuICBjb25zdCBjYXRlZ29yeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXRlZ29yeScpLnZhbHVlO1xuICBjb25zdCBkYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRhdGUtcGlja2VyJykudmFsdWU7XG4gIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtY29udGVudCcpLnZhbHVlO1xuICBjb25zdCBrY2FsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LWtjYWwnKS52YWx1ZTtcblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEFQSS5wb3N0KGAva2NhbHNgLCB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBkYXRlOiBkYXRlLFxuICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICBrY2FsOiBwYXJzZUludChrY2FsKSxcbiAgICBjb250ZW50OiBjb250ZW50LFxuICB9KTtcblxuICBpZiAocmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcykge1xuICAgIHNldFN0YXRlKCdrY2FsRGF0YScsIFsuLi5nZXRTdGF0ZSgna2NhbERhdGEnKSwgcmVzcG9uc2UuZGF0YS5yZXN1bHQua2NhbF0pO1xuICB9IGVsc2Uge1xuICAgIGFsZXJ0KCfsubzroZzrpqwg65Ox66Gd7JeQIOyLpO2MqO2VmOyYgOyKteuLiOuLpC4nKTtcbiAgfVxufTtcblxuY29uc3Qgb25Mb2dpbkhhbmRsZXIgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGVtYWlsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LWlkJykudmFsdWU7XG4gIGNvbnN0IHBhc3N3b3JkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0LXB3JykudmFsdWU7XG4gIGNvbnN0IGRhdGEgPSB7IGVtYWlsLCBwYXNzd29yZCB9O1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEFQSS5wb3N0KGAvdXNlcnMvZW1haWxgLCBkYXRhKTtcbiAgaWYgKHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBvbkxvYWREYXRhSGFuZGxlcigpO1xuICAgIHNldFN0YXRlKCdrY2FsRGF0YScsIHJlc3VsdCk7XG4gICAgY29uc3QgJGFwcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcHAnKTtcbiAgICAkYXBwLmlubmVySFRNTCA9IExheW91dChbTWFpblBhZ2UoKV0pO1xuICB9IGVsc2Uge1xuICAgIGFsZXJ0KCfroZzqt7jsnbjsl5Ag7Iuk7Yyo7ZWY7JiA7Iq164uI64ukLicpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3Qgb25Mb2FkRGF0YUhhbmRsZXIgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQVBJLmdldChgL2tjYWxzYCk7XG4gIGlmIChyZXNwb25zZS5kYXRhLnJlc3VsdC5zdWNjZXNzKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzdWx0LmtjYWxzO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG5cbmNvbnN0IG9uRXZlbnRIYW5kbGVyID0gKCkgPT4ge1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGUpID0+IHtcbiAgICBpZiAoZS50YXJnZXQuY2xvc2VzdChgLm5hdi1idG5gKSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgb25OYXZFdmVudEhhbmRsZXIoZS50YXJnZXQuaWQpO1xuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQuY2xvc2VzdCgnLm1vbnRoLW5hdi1idG4nKSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgb25DaGFuZ2VEYXRlSGFuZGxlcihlLnRhcmdldC5pZCk7XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbG9zZXN0KCcudHlwZS1idG4nKSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgb25TZWxlY3RUeXBlSGFuZGxlcihlLnRhcmdldC5jbGFzc0xpc3QpO1xuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQuY2xvc2VzdCgnLnN1Ym1pdC1idG4nKSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgb25TdWJtaXRIYW5kbGVyKCk7XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbG9zZXN0KCcubG9naW4tYnRuJykpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG9uTG9naW5IYW5kbGVyKCk7XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbG9zZXN0KCcuZ2V0LWJ0bicpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBvbkdldEhhbmRsZXIoKTtcbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgb25FdmVudEhhbmRsZXI7XG4iLCJpbXBvcnQgeyBEaXYsIEtjYWxMaXN0LCBSZWdpc3RlckZvcm0sIENhbGVuZGFyLCBEYXRlTGlzdCB9IGZyb20gJ2NvbXBvbmVudHMnO1xuaW1wb3J0IHsgZGF0ZURlc2NlbmRpbmcgfSBmcm9tICd1dGlscy9kYXRlLXNvcnRpbmcnO1xuXG5leHBvcnQgY29uc3Qgb25TdG9yZURhdGVIYW5kbGVyID0gKGRhdGUpID0+IHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmN1cnJlbnQteWVhci1tb250aCcpLmlubmVySFRNTCA9IGBcbiAgICAke2RhdGUuZ2V0RnVsbFllYXIoKX3rhYQgJHtkYXRlLmdldE1vbnRoKCkgKyAxfeyblFxuICBgO1xuICBpZiAobG9jYXRpb24uaGFzaCA9PT0gJyNjYWxlbmRhcicpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FsZW5kYXItcGFnZScpLmlubmVySFRNTCA9IENhbGVuZGFyKCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBvblN0b3JlTG9hZERhdGFIYW5kbGVyID0gKGRhdGEpID0+IHtcbiAgaWYgKGxvY2F0aW9uLmhhc2ggPT09ICcjbWFpbicpIHtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gIH0gZWxzZSBpZiAobG9jYXRpb24uaGFzaCA9PT0gJyNjYWxlbmRhcicpIHtcbiAgICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGVudCcpO1xuICB9XG59O1xuIiwiaW1wb3J0IHsgTGF5b3V0IH0gZnJvbSAnY29tcG9uZW50cyc7XG5pbXBvcnQgTWFpblBhZ2UgZnJvbSAnLi9tYWluJztcbmltcG9ydCBMb2dpblBhZ2UgZnJvbSAnLi9sb2dpbic7XG5pbXBvcnQgb25FdmVudEhhbmRsZXIgZnJvbSAnLi4vZXZlbnQtaGFuZGxlcic7XG5pbXBvcnQgeyBvbkxvYWREYXRhSGFuZGxlciB9IGZyb20gJy4uL2V2ZW50LWhhbmRsZXInO1xuaW1wb3J0IHsgc2V0U3RhdGUsIHNldEV2ZW50IH0gZnJvbSAnc3RvcmUnO1xuaW1wb3J0IHsgb25TdG9yZURhdGVIYW5kbGVyLCBvblN0b3JlTG9hZERhdGFIYW5kbGVyIH0gZnJvbSAnLi4vZXZlbnQtaGFuZGxlci9zdG9yZS1ldmVudCc7XG5cbmNvbnN0IEFwcCA9IGFzeW5jICgpID0+IHtcbiAgc2V0U3RhdGUoJ2RhdGUnLCBuZXcgRGF0ZSgpKTtcbiAgc2V0RXZlbnQoJ2RhdGUnLCBvblN0b3JlRGF0ZUhhbmRsZXIpO1xuICBvbkV2ZW50SGFuZGxlcigpO1xuICAvLyDsv6DtgqQg7LK07YGs7ZW07IScIOyXhuycvOuptCDroZzqt7jsnbjsnLzroZwg65287Jqw7YyFXG4gIGNvbnN0IGNvb2tpZVZhbHVlID0gZG9jdW1lbnQuY29va2llLm1hdGNoKCcoXnw7KSA/YXV0aG9yaXphdGlvbj0oW147XSopKDt8JCknKTtcbiAgaWYgKGNvb2tpZVZhbHVlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgb25Mb2FkRGF0YUhhbmRsZXIoKTtcbiAgICBzZXRTdGF0ZSgna2NhbERhdGEnLCByZXN1bHQpO1xuICAgIHNldEV2ZW50KCdrY2FsRGF0YScsIG9uU3RvcmVMb2FkRGF0YUhhbmRsZXIpO1xuICAgIHJldHVybiBjb29raWVWYWx1ZVsyXSAmJiBMYXlvdXQoW01haW5QYWdlKCldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gTGF5b3V0KFtMb2dpblBhZ2UoKV0pO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCJpbXBvcnQgQXBwIGZyb20gJ3BhZ2VzJztcblxuKGFzeW5jICgpID0+IHtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKS5pbm5lckhUTUwgPSBhd2FpdCBBcHAoKTtcbn0pKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9